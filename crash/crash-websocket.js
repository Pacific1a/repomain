(function() {
  'use strict';

  // ============ –°–û–°–¢–û–Ø–ù–ò–Ø ============
  const GAME_STATES = {
    WAITING: 'waiting',
    FLYING: 'flying',
    CRASHED: 'crashed'
  };

  const BUTTON_STATES = {
    BET: 'bet',
    CANCEL: 'cancel',
    CASHOUT: 'cashout'
  };

  let gameState = GAME_STATES.WAITING;
  let buttonState = BUTTON_STATES.BET;
  let playerBetAmount = 0;
  let playerHasBet = false;
  let playerCashedOut = false;
  let betPlacedDuringFlight = false; // –§–ª–∞–≥: —Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ (–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞)
  let currentMultiplier = 1.00;
  let players = [];
  let ws = null;
  let autoCashOutEnabled = false;
  let autoCashOutMultiplier = 2.0;
  let crashChart = null;
  let crashHistory = [];
  
  // Debounce –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI
  let updateUIScheduled = false;
  let playerElementsCache = new Map();

  // ============ –≠–õ–ï–ú–ï–ù–¢–´ ============
  const elements = {
    // –ò–≥—Ä–∞
    waitingRoot: document.getElementById('waitingRoot'),
    waitingTimer: null, // –°–æ–∑–¥–∞–¥–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    multiplierLayer: document.getElementById('multiplierLayer'),
    currentMultiplier: document.getElementById('currentMultiplier'),
    gameEnded: document.querySelector('.game-ended'),
    crashHistory: document.getElementById('crashHistory'),
    
    // –°—Ç–∞–≤–∫–∞
    betInput: document.querySelector('#betInput'),
    betButton: document.querySelector('.cancel-button-next'),
    betButtonText: document.querySelector('.cancel-button-next .text-wrapper-15'),
    betButtonChips: document.querySelector('.cancel-button-next .text-wrapper-16'),
    minusBtn: document.querySelector('.button'),
    plusBtn: document.querySelector('.union-wrapper'),
    multiplyButtons: document.querySelectorAll('.button-2'),
    
    // Auto Cash Out
    autoSection: document.querySelector('.auto-section'),
    autoSwitcher: document.querySelector('.bg-svitch'),
    autoSwitcherBg: document.querySelector('.bg-sv'),
    autoInput: document.querySelector('.text-auto-2 span:first-child'),
    autoClear: document.querySelector('.text-auto-2 .close'),
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    totalBetsCount: document.querySelector('.total-bets .text-wrapper-17'),
    totalWinAmount: document.querySelector('.total-win .text-wrapper-19'),
    progressBar: document.querySelector('.progress-bar .rectangle-3'),
    
    // –ò–≥—Ä–æ–∫–∏
    playersList: document.querySelector('.user-templates')
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  if (elements.gameEnded) {
    elements.gameEnded.style.display = 'none';
  }
  
  // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (—Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π –±–ª—é—Ä) - –° –°–ê–ú–û–ì–û –ù–ê–ß–ê–õ–ê
  const gameContainer = document.querySelector('.game');
  if (gameContainer) {
    const loadingOverlay = document.createElement('div');
    loadingOverlay.className = 'loading-overlay';
    loadingOverlay.style.opacity = '1';
    loadingOverlay.style.display = 'flex';
    loadingOverlay.innerHTML = `
      <div class="glass-loader">
        <div class="glass-shine"></div>
      </div>
    `;
    gameContainer.appendChild(loadingOverlay);
    elements.loadingOverlay = loadingOverlay;
  }
  
  // –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
  let dataReceived = false;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
  if (gameContainer && window.CrashChart && elements.currentMultiplier) {
    crashChart = new window.CrashChart(gameContainer, elements.currentMultiplier);
    crashChart.stop();
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  if (elements.multiplierLayer) {
    elements.multiplierLayer.style.display = 'none';
  }
  
  if (elements.waitingRoot) {
    elements.waitingRoot.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const timerSpan = document.createElement('span');
    timerSpan.textContent = '0';
    elements.waitingRoot.appendChild(timerSpan);
    elements.waitingTimer = timerSpan;
  }
  
  // –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (elements.totalBetsCount) {
    elements.totalBetsCount.textContent = '0/550';
  }
  if (elements.totalWinAmount) {
    elements.totalWinAmount.textContent = '0';
  }
  if (elements.progressBar) {
    elements.progressBar.style.width = '0%';
  }

  // ============ WEBSOCKET ============
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Auto Cash Out —Å–µ–∫—Ü–∏–∏
  function updateAutoSectionState() {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º Auto Cash Out –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ (–¥–æ –º–æ–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞)
    const isDisabled = playerHasBet && !playerCashedOut;
    
    if (elements.autoSection) {
      if (isDisabled) {
        elements.autoSection.style.opacity = '0.5';
        elements.autoSection.style.pointerEvents = 'none';
        elements.autoSection.style.cursor = 'not-allowed';
      } else {
        elements.autoSection.style.opacity = '1';
        elements.autoSection.style.pointerEvents = 'auto';
        elements.autoSection.style.cursor = 'default';
      }
    }
  }
  
  function waitForWebSocket() {
    if (window.GameWebSocket && window.GameWebSocket.socket && window.GameWebSocket.connected) {
      ws = window.GameWebSocket;
      console.log('‚úÖ Crash WebSocket –≥–æ—Ç–æ–≤');
      initWebSocket();
    } else {
      setTimeout(waitForWebSocket, 100); // –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É 500ms ‚Üí 100ms
    }
  }

  function initWebSocket() {
    console.log('üöÄ Crash WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    ws.socket.emit('join_game', { game: 'crash' });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ws.socket.on('game_state_sync', (state) => {
      console.log('üîÑ Crash —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
      
      // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      if (!dataReceived && elements.loadingOverlay) {
        dataReceived = true;
        setTimeout(() => {
          elements.loadingOverlay.style.opacity = '0';
          setTimeout(() => {
            elements.loadingOverlay.style.display = 'none';
          }, 500);
        }, 300);
      }
      
      players = state.players || [];
      scheduleUIUpdate();
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      if (state.status === 'flying' && gameState === GAME_STATES.WAITING) {
        // –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameState = GAME_STATES.FLYING;
        updateAutoSectionState(); // –ë–ª–æ–∫–∏—Ä—É–µ–º Auto Cash Out
        
        // –°–∫—Ä—ã–≤–∞–µ–º waiting overlay
        if (elements.waitingRoot) {
          elements.waitingRoot.style.display = 'none';
        }
        if (elements.multiplierLayer) {
          elements.multiplierLayer.style.display = 'flex';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        if (crashChart && crashChart.canvas) {
          crashChart.canvas.style.opacity = '1';
          crashChart.canvas.style.visibility = 'visible';
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
        if (crashChart && !crashChart.isCrashed && state.startTime) {
          const startTime = new Date(state.startTime).getTime();
          const now = Date.now();
          const elapsed = now - startTime;
          
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º startTime –≥—Ä–∞—Ñ–∏–∫–∞
          crashChart.startTime = startTime;
          crashChart.points = [];
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—á–µ–∫ –æ—Ç 1.00x –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
          // –†–æ—Å—Ç: +0.02x –∫–∞–∂–¥—ã–µ 350ms
          const updateInterval = 350;
          const step = 0.02;
          const numUpdates = Math.floor(elapsed / updateInterval);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
          crashChart.points.push({ time: 0, multiplier: 1.00 });
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
          for (let i = 1; i <= numUpdates; i++) {
            const pointTime = i * updateInterval;
            const pointMultiplier = parseFloat((1.00 + i * step).toFixed(2));
            crashChart.points.push({ time: pointTime, multiplier: pointMultiplier });
          }
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º
          const serverMultiplier = state.multiplier || null;
          const calculatedMultiplier = serverMultiplier || parseFloat((1.00 + numUpdates * step).toFixed(2));
          currentMultiplier = calculatedMultiplier;
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Å –Ω–∏–º
          if (serverMultiplier && serverMultiplier > calculatedMultiplier) {
            crashChart.points.push({ time: elapsed, multiplier: serverMultiplier });
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (elements.currentMultiplier) {
            elements.currentMultiplier.textContent = `${calculatedMultiplier.toFixed(2)}x`;
            elements.currentMultiplier.classList.remove('crashed');
          }
          
          console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${crashChart.points.length} —Ç–æ—á–µ–∫ –≥—Ä–∞—Ñ–∏–∫–∞, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${calculatedMultiplier.toFixed(2)}x`);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (crashChart && !crashChart.isCrashed) {
          crashChart.start();
        }
      }
      
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      // playerHasBet, playerCashedOut, playerBetAmount –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
    });

    // –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
    ws.socket.on('player_bet', (data) => {
      console.log('üí∞ –°—Ç–∞–≤–∫–∞:', data);
      
      const existing = players.find(p => p.userId === data.userId);
      if (existing) {
        existing.bet += data.bet;
      } else {
        players.push({
          userId: data.userId,
          nickname: data.nickname,
          photoUrl: data.photoUrl,
          bet: data.bet,
          cashout: null,
          multiplier: null
        });
      }
      
      scheduleUIUpdate();
    });

    // –ò–≥—Ä–æ–∫ –æ—Ç–º–µ–Ω–∏–ª —Å—Ç–∞–≤–∫—É
    ws.socket.on('player_removed', (data) => {
      console.log('‚ùå –ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω:', data);
      
      const index = players.findIndex(p => p.userId === data.userId);
      if (index !== -1) {
        players.splice(index, 1);
        scheduleUIUpdate();
      }
    });

    // –¢–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
    ws.socket.on('crash_waiting', (data) => {
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ:', data.timeLeft);
      gameState = GAME_STATES.WAITING;
      currentMultiplier = 1.00;
      updateAutoSectionState(); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º Auto Cash Out
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –ø–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è
      if (elements.currentMultiplier) {
        elements.currentMultiplier.textContent = '1.00x';
        elements.currentMultiplier.classList.remove('crashed');
      }
      
      // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¢–û–õ–¨–ö–û –ö–û–ì–î–ê –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï
      if (!dataReceived && elements.loadingOverlay) {
        dataReceived = true;
        setTimeout(() => {
          elements.loadingOverlay.style.opacity = '0';
          setTimeout(() => {
            elements.loadingOverlay.style.display = 'none';
          }, 500);
        }, 300);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º waiting
      if (elements.waitingRoot) {
        elements.waitingRoot.style.display = 'flex';
        elements.waitingRoot.style.visibility = 'visible';
      }
      if (elements.multiplierLayer) {
        elements.multiplierLayer.style.display = 'none';
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
      if (crashChart && crashChart.canvas) {
        crashChart.canvas.style.opacity = '0';
        crashChart.canvas.style.visibility = 'hidden';
        crashChart.stop();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –≤—Å–µ–≥–¥–∞
      if (elements.waitingTimer) {
        elements.waitingTimer.textContent = data.timeLeft;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º CANCEL
      if (playerHasBet && !playerCashedOut) {
        setButtonState(BUTTON_STATES.CANCEL);
      }
    });

    // –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    ws.socket.on('crash_started', async (data) => {
      console.log('üöÄ Crash –Ω–∞—á–∞–ª—Å—è!');
      gameState = GAME_STATES.FLYING;
      currentMultiplier = 1.00;
      updateAutoSectionState(); // –ë–ª–æ–∫–∏—Ä—É–µ–º Auto Cash Out
      
      // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¢–û–õ–¨–ö–û –ö–û–ì–î–ê –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï
      if (!dataReceived && elements.loadingOverlay) {
        dataReceived = true;
        setTimeout(() => {
          elements.loadingOverlay.style.opacity = '0';
          setTimeout(() => {
            elements.loadingOverlay.style.display = 'none';
          }, 500);
        }, 300);
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º waiting
      if (elements.waitingRoot) {
        elements.waitingRoot.style.display = 'none';
      }
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML –º–Ω–æ–∂–∏—Ç–µ–ª—å
      if (elements.multiplierLayer) {
        elements.multiplierLayer.style.display = 'flex';
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        void elements.multiplierLayer.offsetHeight;
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º "Round ended"
      if (elements.gameEnded) {
        elements.gameEnded.style.display = 'none';
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
      if (crashChart && crashChart.canvas) {
        crashChart.canvas.style.opacity = '1';
        crashChart.canvas.style.visibility = 'visible';
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1.00x –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≥—Ä–∞—Ñ–∏–∫–∞
      if (elements.currentMultiplier) {
        elements.currentMultiplier.textContent = '1.00x';
        elements.currentMultiplier.classList.remove('crashed');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        void elements.currentMultiplier.offsetHeight;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ (–≥—Ä–∞—Ñ–∏–∫ —Ç–æ–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç 1.00x)
      if (crashChart) {
        crashChart.start();
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ - —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –í–°–ï–• –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
      if (playerHasBet && !playerCashedOut) {
        // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞
        const success = await window.GameBalanceAPI.placeBet(playerBetAmount, 'rubles');
        if (!success) {
          // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ - –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
          console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞–≤–∫–∏');
          playerBetAmount = 0;
          playerHasBet = false;
          playerCashedOut = false;
          betPlacedDuringFlight = false;
          setButtonState(BUTTON_STATES.BET);
          updateAutoSectionState();
          return;
        }
        
        // –ë–∞–ª–∞–Ω—Å —Å–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (ws) {
          const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || 123456789;
          const tgUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
          const nickname = tgUser?.first_name || 'Test';
          const photoUrl = tgUser?.photo_url || null;

          ws.socket.emit('place_bet', {
            game: 'crash',
            userId,
            nickname,
            photoUrl,
            bet: playerBetAmount
          });
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        betPlacedDuringFlight = false;
        setButtonState(BUTTON_STATES.CASHOUT);
        updateAutoSectionState(); // –ë–ª–æ–∫–∏—Ä—É–µ–º Auto Cash Out —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        console.log('‚úÖ –°—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞, –±–∞–ª–∞–Ω—Å —Å–ø–∏—Å–∞–Ω');
      } else if (playerHasBet && playerCashedOut) {
        // –£–∂–µ –∑–∞–±—Ä–∞–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º BET –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        setButtonState(BUTTON_STATES.BET);
        updateAutoSectionState(); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º Auto Cash Out —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –∑–∞–±—Ä–∞–ª–∏
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    ws.socket.on('crash_multiplier', (data) => {
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤ FLYING –∏–ª–∏ CRASHED —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ WAITING (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition —Å crash_started)
      if (gameState === GAME_STATES.WAITING) {
        console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ WAITING —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
        return;
      }
      
      currentMultiplier = data.multiplier;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ (–≥—Ä–∞—Ñ–∏–∫ —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è)
      if (crashChart) {
        crashChart.updateMultiplier(data.multiplier);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º live –≤—ã–∏–≥—Ä—ã—à –¢–û–õ–¨–ö–û –Ω–∞ –∂–µ–ª—Ç–æ–π –∫–Ω–æ–ø–∫–µ CASH OUT
      if (playerHasBet && !playerCashedOut && buttonState === BUTTON_STATES.CASHOUT && elements.betButtonChips) {
        const potentialWin = Math.floor(playerBetAmount * currentMultiplier);
        elements.betButtonChips.textContent = `${potentialWin} chips`;
      }
      
      // Auto Cash Out
      if (autoCashOutEnabled && playerHasBet && !playerCashedOut && currentMultiplier >= autoCashOutMultiplier) {
        console.log(`ü§ñ Auto Cash Out –Ω–∞ ${currentMultiplier.toFixed(2)}x`);
        performCashOut();
      }
    });

    // –ò–≥—Ä–æ–∫ –∑–∞–±—Ä–∞–ª
    ws.socket.on('player_cashout', (data) => {
      console.log('üíµ –ó–∞–±—Ä–∞–ª:', data);
      
      const player = players.find(p => p.userId === data.userId);
      if (player) {
        player.cashout = data.cashout;
        player.multiplier = data.multiplier;
      }
      
      scheduleUIUpdate();
    });

    // –ö—Ä–∞—à
    ws.socket.on('crash_ended', (data) => {
      console.log('üí• –ö—Ä–∞—à –Ω–∞:', data.crashPoint);
      gameState = GAME_STATES.CRASHED;
      currentMultiplier = data.crashPoint;
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä–∞—à–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ (–≥—Ä–∞—Ñ–∏–∫ —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è)
      if (crashChart) {
        crashChart.crash(data.crashPoint);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "Round ended"
      if (elements.gameEnded) {
        elements.gameEnded.style.display = 'block';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      addToCrashHistory(data.crashPoint);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –∑–∞–±—Ä–∞–ª–∏
      if (playerHasBet && !playerCashedOut) {
        // –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ - –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        // –û–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        if (!betPlacedDuringFlight) {
          // –û–±—ã—á–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ
          playerHasBet = false;
          playerBetAmount = 0;
          playerCashedOut = false;
        }
        // betPlacedDuringFlight –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
      if (betPlacedDuringFlight) {
        setButtonState(BUTTON_STATES.CANCEL);
      } else {
        setButtonState(BUTTON_STATES.BET);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Auto Cash Out –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–æ–≤
      updateAutoSectionState();
    });
  }

  // ============ –°–¢–ê–í–ö–ê ============
  function getBetAmount() {
    return parseInt(elements.betInput?.value) || 50;
  }

  function setBetAmount(amount) {
    if (elements.betInput) {
      elements.betInput.value = Math.max(50, amount);
    }
  }

  // –ö–Ω–æ–ø–∫–∏ +/- (–∞–∫—Ç–∏–≤–Ω—ã –≤—Å–µ–≥–¥–∞)
  if (elements.minusBtn) {
    elements.minusBtn.addEventListener('click', () => {
      setBetAmount(getBetAmount() - 50);
      if (buttonState === BUTTON_STATES.BET) {
        setButtonState(BUTTON_STATES.BET); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
      }
    });
  }

  if (elements.plusBtn) {
    elements.plusBtn.addEventListener('click', () => {
      setBetAmount(getBetAmount() + 50);
      if (buttonState === BUTTON_STATES.BET) {
        setButtonState(BUTTON_STATES.BET); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
      }
    });
  }
  
  // –ö–Ω–æ–ø–∫–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è (1x, 2x, 5x, 10x) - –∞–∫—Ç–∏–≤–Ω—ã –≤—Å–µ–≥–¥–∞
  if (elements.multiplyButtons) {
    elements.multiplyButtons.forEach((btn, index) => {
      btn.addEventListener('click', () => {
        const multipliers = [1, 2, 5, 10];
        const current = getBetAmount();
        setBetAmount(current * multipliers[index]);
        if (buttonState === BUTTON_STATES.BET) {
          setButtonState(BUTTON_STATES.BET); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        }
      });
    });
  }

  // ============ –ö–ù–û–ü–ö–ê BET/CANCEL/CASHOUT ============
  function setButtonState(state) {
    buttonState = state;
    const betButton = elements.betButton;
    if (!betButton) return;

    const textEl = elements.betButtonText;
    const chipsEl = elements.betButtonChips;

    switch(state) {
      case BUTTON_STATES.BET:
        if (textEl) textEl.textContent = 'BET';
        if (chipsEl) chipsEl.textContent = `${getBetAmount()} chips`;
        betButton.style.background = 'linear-gradient(90deg, #407B3D 0%, #54A450 100%)';
        break;
        
      case BUTTON_STATES.CANCEL:
        if (textEl) textEl.textContent = 'CANCEL';
        if (chipsEl) chipsEl.textContent = 'Wait to next round';
        betButton.style.background = 'linear-gradient(90deg, #874041 0%, #BA5759 100%)';
        break;
        
      case BUTTON_STATES.CASHOUT:
        if (textEl) textEl.textContent = 'CASH OUT';
        if (chipsEl) {
          const potentialWin = Math.floor(playerBetAmount * currentMultiplier);
          chipsEl.textContent = `${potentialWin} chips`;
        }
        betButton.style.background = 'linear-gradient(90deg, #877440 0%, #BAA657 100%)';
        break;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è Cash Out
  async function performCashOut() {
    if (!playerHasBet || playerCashedOut) return;
    
    // –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –µ—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    if (betPlacedDuringFlight) {
      console.log('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞');
      return;
    }
    
    const winAmount = Math.floor(playerBetAmount * currentMultiplier);
    await window.GameBalanceAPI.payWinnings(winAmount, 'rubles');
    
    playerCashedOut = true;
    betPlacedDuringFlight = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    setButtonState(BUTTON_STATES.BET);
    updateAutoSectionState(); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º Auto Cash Out –ø–æ—Å–ª–µ –∑–∞–±–∏—Ä–∞–Ω–∏—è
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (ws) {
      const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || 123456789;
      
      ws.socket.emit('crash_cashout', {
        game: 'crash',
        userId
      });
    }
    
    console.log(`üí∞ Cash Out: ${winAmount} chips (${currentMultiplier.toFixed(2)}x)`);
  }

  if (elements.betButton) {
    elements.betButton.addEventListener('click', async () => {
      if (buttonState === BUTTON_STATES.BET && gameState !== GAME_STATES.FLYING) {
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É –≤ –ø–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è (–±–∞–ª–∞–Ω—Å –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º)
        const betAmount = getBetAmount();
        
        if (!window.GameBalanceAPI || !window.GameBalanceAPI.canPlaceBet(betAmount, 'rubles')) {
          console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫');
          return;
        }
        
        // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å, –Ω–æ –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º
        // –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –∫–æ–≥–¥–∞ —Ä–∞—É–Ω–¥ –Ω–∞—á–Ω–µ—Ç—Å—è
        playerBetAmount = betAmount;
        playerHasBet = true;
        playerCashedOut = false;
        betPlacedDuringFlight = false; // –°—Ç–∞–≤–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è
        setButtonState(BUTTON_STATES.CANCEL);
        updateAutoSectionState();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –æ —Å—Ç–∞–≤–∫–µ
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert(`–°—Ç–∞–≤–∫–∞ ${betAmount} chips —Å–¥–µ–ª–∞–Ω–∞!`);
        }
        
        console.log(`‚úÖ –°—Ç–∞–≤–∫–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞: ${betAmount} chips (–±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–∞—É–Ω–¥–∞)`);
      } else if (buttonState === BUTTON_STATES.BET && gameState === GAME_STATES.FLYING) {
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ (–±–∞–ª–∞–Ω—Å –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º)
        const betAmount = getBetAmount();
        
        if (!window.GameBalanceAPI || !window.GameBalanceAPI.canPlaceBet(betAmount, 'rubles')) {
          console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫');
          return;
        }
        
        // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞, –Ω–æ –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º
        // –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
        playerBetAmount = betAmount;
        playerHasBet = true;
        playerCashedOut = false;
        betPlacedDuringFlight = true; // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞
        setButtonState(BUTTON_STATES.CANCEL);
        updateAutoSectionState();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –æ —Å—Ç–∞–≤–∫–µ
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert(`–°—Ç–∞–≤–∫–∞ ${betAmount} chips —Å–¥–µ–ª–∞–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!`);
        }
        
        console.log(`‚úÖ –°—Ç–∞–≤–∫–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥: ${betAmount} chips (–±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)`);
      } else if (buttonState === BUTTON_STATES.CANCEL) {
        // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
        // –ë–∞–ª–∞–Ω—Å –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ—Ç–º–µ–Ω—É —Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        if (!betPlacedDuringFlight && ws) {
          const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || 123456789;
          
          ws.socket.emit('cancel_bet', {
            game: 'crash',
            userId
          });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –æ–± –æ—Ç–º–µ–Ω–µ —Å—Ç–∞–≤–∫–∏
        if (window.Telegram?.WebApp?.showAlert) {
          window.Telegram.WebApp.showAlert('–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!');
        }
        
        console.log('‚ùå –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        
        playerBetAmount = 0;
        playerHasBet = false;
        playerCashedOut = false;
        betPlacedDuringFlight = false;
        setButtonState(BUTTON_STATES.BET);
        updateAutoSectionState();
      } else if (buttonState === BUTTON_STATES.CASHOUT) {
        // –ó–∞–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
        await performCashOut();
      }
    });
  }

  // ============ –ò–°–¢–û–†–ò–Ø –ö–†–ê–®–ï–ô ============
  function addToCrashHistory(crashPoint) {
    crashHistory.unshift(crashPoint);
    
    if (crashHistory.length > 10) {
      crashHistory = crashHistory.slice(0, 10);
    }
    
    updateCrashHistoryUI();
  }
  
  function updateCrashHistoryUI() {
    if (!elements.crashHistory) return;
    
    elements.crashHistory.innerHTML = '';
    
    crashHistory.forEach(point => {
      const historyItem = document.createElement('div');
      historyItem.className = 'history-item';
      
      const colors = [
        { min: 50, color: '#7C0073' },
        { min: 10, color: '#9D1593' },
        { min: 8,  color: '#9033CE' },
        { min: 5,  color: '#8238DB' },
        { min: 3,  color: '#BF3190' },
        { min: 2,  color: '#BF3190' },
        { min: 1.5, color: '#BF3190' },
        { min: 0,  color: '#BF3190' }
      ];
      
      const color = colors.find(c => point >= c.min).color;
      
      historyItem.style.cssText = `
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 6px 10px;
        min-width: 50px;
      `;
      
      const textEl = document.createElement('span');
      textEl.style.cssText = `
        font-family: 'Montserrat', Helvetica;
        font-weight: 600;
        font-size: 12px;
        color: ${color};
      `;
      textEl.textContent = `${point.toFixed(2)}x`;
      
      historyItem.appendChild(textEl);
      elements.crashHistory.appendChild(historyItem);
    });
  }

  // ============ –û–ë–ù–û–í–õ–ï–ù–ò–ï UI (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û) ============
  
  // –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —á–µ—Ä–µ–∑ requestAnimationFrame
  function scheduleUIUpdate() {
    if (updateUIScheduled) return;
    updateUIScheduled = true;
    
    requestAnimationFrame(() => {
      updateUIScheduled = false;
      updatePlayersUI();
      updateStats();
    });
  }
  
  function updatePlayersUI() {
    if (!elements.playersList) return;

    const fragment = document.createDocumentFragment();
    const currentPlayerIds = new Set();

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    players.forEach(player => {
      if (!player || !player.userId) return;
      currentPlayerIds.add(player.userId);
      
      let playerEl = playerElementsCache.get(player.userId);
      let needsUpdate = false;
      
      if (!playerEl) {
        playerEl = document.createElement('div');
        playerEl.dataset.userId = player.userId;
        playerElementsCache.set(player.userId, playerEl);
        needsUpdate = true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const newClassName = player.cashout ? 'win' : 'default';
      if (playerEl.className !== newClassName) {
        playerEl.className = newClassName;
        needsUpdate = true;
      }
      
      if (needsUpdate || playerEl._lastBet !== player.bet || 
          playerEl._lastCashout !== player.cashout || 
          playerEl._lastMultiplier !== player.multiplier) {
        
        // –ê–≤–∞—Ç–∞—Ä–∫–∞
        let avatarHTML = '';
        if (player.photoUrl) {
          avatarHTML = `<div class="avatar-2" style="background-image: url(${player.photoUrl}); background-size: cover;"></div>`;
        } else {
          const initial = player.nickname[0].toUpperCase();
          avatarHTML = `<div class="avatar-2" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; display: flex; align-items: center; justify-content: center; font-weight: bold;">${initial}</div>`;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∫ –ü–û–õ–ù–û–°–¢–¨–Æ –±–µ–∑ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        const multiplierText = player.multiplier ? `${player.multiplier.toFixed(2)}x` : '-';
        const cashoutText = player.cashout ? player.cashout : '-';
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é: –≤—ã–∏–≥—Ä—ã—à - –∑–µ–ª—ë–Ω—ã–π, –±–µ–∑ –≤—ã–∏–≥—Ä—ã—à–∞ - —Å–µ—Ä—ã–π
        const hasCashout = player.cashout && player.cashout > 0;
        const multiplierClass = hasCashout ? 'text-wrapper-24' : 'text-wrapper-24';
        const cashoutClass = hasCashout ? 'text-wrapper-25' : 'text-wrapper-24';
        
        playerEl.innerHTML = `
          <div class="acc-inf">
            <div class="div-wrapper-2">${avatarHTML}</div>
            <div class="div-wrapper-3"><div class="text-wrapper-22">${player.nickname}</div></div>
          </div>
          <div class="div-wrapper-3"><div class="text-wrapper-23">${player.bet}</div></div>
          <div class="div-wrapper-3"><div class="${multiplierClass}">${multiplierText}</div></div>
          <div class="div-wrapper-4"><div class="${cashoutClass}">${cashoutText}</div></div>
        `;
        
        playerEl._lastBet = player.bet;
        playerEl._lastCashout = player.cashout;
        playerEl._lastMultiplier = player.multiplier;
      }
      
      fragment.appendChild(playerEl);
    });

    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
    for (const [userId, element] of playerElementsCache.entries()) {
      if (!currentPlayerIds.has(userId)) {
        playerElementsCache.delete(userId);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º DOM –æ–¥–Ω–∏–º —Ä–∞–∑–æ–º
    elements.playersList.innerHTML = '';
    elements.playersList.appendChild(fragment);
  }

  function updateStats() {
    // –°—á–∏—Ç–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
    let totalBets = 0;
    let totalWin = 0;
    const betsCount = players.length;
    
    for (let i = 0; i < players.length; i++) {
      const p = players[i];
      totalBets += p.bet || 0;
      totalWin += p.cashout || 0;
    }
    
    // Total Bets
    if (elements.totalBetsCount) {
      elements.totalBetsCount.textContent = `${betsCount}/550`;
    }
    
    // Total Win
    if (elements.totalWinAmount) {
      elements.totalWinAmount.textContent = totalWin > 0 ? totalWin.toLocaleString() : '0';
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    if (elements.progressBar) {
      const progress = Math.min((betsCount / 550) * 100, 100);
      elements.progressBar.style.width = `${progress}%`;
    }
  }

  // ============ AUTO CASH OUT ============
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Auto Cash Out
  if (elements.autoSwitcher) {
    elements.autoSwitcher.addEventListener('click', () => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞
      if (playerHasBet && !playerCashedOut) {
        console.log('‚ö†Ô∏è Auto Cash Out –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞');
        return;
      }
      
      autoCashOutEnabled = !autoCashOutEnabled;
      
      if (elements.autoSwitcherBg) {
        if (autoCashOutEnabled) {
          elements.autoSwitcherBg.style.transform = 'translateX(20px)';
          elements.autoSwitcherBg.style.background = '#39d811';
        } else {
          elements.autoSwitcherBg.style.transform = 'translateX(0)';
          elements.autoSwitcherBg.style.background = '#6a6a6a';
        }
      }
      
      console.log(`ü§ñ Auto Cash Out: ${autoCashOutEnabled ? 'ON' : 'OFF'}`);
    });
  }
  
  // –í–≤–æ–¥ –º–Ω–æ–∂–∏—Ç–µ–ª—è
  if (elements.autoInput) {
    elements.autoInput.contentEditable = 'true';
    elements.autoInput.addEventListener('input', (e) => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞
      if (playerHasBet && !playerCashedOut) {
        e.preventDefault();
        return;
      }
      
      let value = e.target.textContent.replace(/[^0-9.]/g, '');
      const num = parseFloat(value) || 2.0;
      autoCashOutMultiplier = Math.max(1.01, Math.min(100, num));
      e.target.textContent = autoCashOutMultiplier.toFixed(2);
    });
  }
  
  // –û—á–∏—Å—Ç–∫–∞
  if (elements.autoClear) {
    elements.autoClear.addEventListener('click', () => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞
      if (playerHasBet && !playerCashedOut) {
        console.log('‚ö†Ô∏è Auto Cash Out –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞');
        return;
      }
      
      if (elements.autoInput) {
        elements.autoInput.textContent = '2.00';
        autoCashOutMultiplier = 2.0;
      }
    });
  }



  // ============ –ó–ê–ü–£–°–ö ============
  waitForWebSocket();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
  setButtonState(BUTTON_STATES.BET);

  console.log('‚úÖ Crash WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

})();
