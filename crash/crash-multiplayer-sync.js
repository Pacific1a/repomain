(function() {
  'use strict';

  let ws = null;
  let gameState = {
    status: 'waiting', // waiting, betting, flying, crashed
    players: [],
    multiplier: 1.00,
    crashPoint: null,
    startTime: null
  };

  // –ñ–¥—ë–º WebSocket
  function waitForWebSocket() {
    if (window.GameWebSocket && window.GameWebSocket.socket && window.GameWebSocket.connected) {
      ws = window.GameWebSocket;
      console.log('‚úÖ Crash WebSocket –≥–æ—Ç–æ–≤');
      console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', ws.connected);
      console.log('üÜî Socket ID:', ws.socket.id);
      initSync();
    } else {
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ WebSocket –¥–ª—è Crash...');
      setTimeout(waitForWebSocket, 500);
    }
  }

  function initSync() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Crash —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏–≥—Ä—É Crash
    ws.socket.emit('join_game', { game: 'crash' });
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å join_game –¥–ª—è crash');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ws.socket.on('game_state_sync', (state) => {
      console.log('üîÑ Crash —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', state);
      gameState = state;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      updatePlayersUI();
      updateGamePhase(state.status);
    });

    // –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É
    ws.socket.on('player_bet', (data) => {
      console.log('üí∞ Crash: –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É:', data);
      
      // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
      const existingPlayer = gameState.players.find(p => p.userId === data.userId);
      if (existingPlayer) {
        existingPlayer.bet += data.bet;
      } else {
        gameState.players.push({
          userId: data.userId,
          nickname: data.nickname,
          bet: data.bet,
          cashout: null,
          multiplier: null
        });
      }

      updatePlayersUI();
    });

    // –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å (—Ä–∞–∫–µ—Ç–∞ –≤–∑–ª–µ—Ç–∞–µ—Ç)
    ws.socket.on('crash_started', (data) => {
      console.log('üöÄ Crash –Ω–∞—á–∞–ª—Å—è!', data);
      gameState.status = 'flying';
      gameState.startTime = data.startTime;
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–∞–Ω–µ–ª–∏ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è DOM
      updateGamePhase('flying');
      
      if (window.crashGame && window.crashGame.start) {
        window.crashGame.start(data.startTime);
      }
    });
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    ws.socket.on('crash_multiplier', (data) => {
      gameState.multiplier = data.multiplier;
      
      if (window.crashGame && window.crashGame.updateMultiplier) {
        window.crashGame.updateMultiplier(data.multiplier);
      }
    });

    // –ò–≥—Ä–æ–∫ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à
    ws.socket.on('player_cashout', (data) => {
      console.log('üíµ –ò–≥—Ä–æ–∫ –∑–∞–±—Ä–∞–ª:', data);
      
      const player = gameState.players.find(p => p.userId === data.userId);
      if (player) {
        player.cashout = data.cashout;
        player.multiplier = data.multiplier;
      }
      
      updatePlayersUI();
    });

    // –ò–≥—Ä–∞ —É–ø–∞–ª–∞ (crashed)
    ws.socket.on('crash_ended', (data) => {
      console.log('üí• Crash —É–ø–∞–ª –Ω–∞:', data.crashPoint);
      gameState.status = 'crashed';
      gameState.crashPoint = data.crashPoint;
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º crashed
      updateGamePhase('crashed');
      
      if (window.crashGame && window.crashGame.crash) {
        window.crashGame.crash(data.crashPoint);
      }

      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º - –∂–¥–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ waiting —Å —Å–µ—Ä–≤–µ—Ä–∞
    });
  }

  // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
  function placeBet(amount) {
    if (!ws) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userId, nickname, photoUrl;

    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
      userId = tgUser.id;
      nickname = tgUser.first_name || tgUser.username || 'Player';
      photoUrl = tgUser.photo_url || null;
    } else if (window.TelegramUserData) {
      userId = window.TelegramUserData.id;
      nickname = window.TelegramUserData.first_name || window.TelegramUserData.username || 'Player';
      photoUrl = window.TelegramUserData.photo_url || null;
    } else if (ws.currentUser) {
      userId = ws.currentUser.id;
      nickname = ws.currentUser.nickname || 'Player';
      photoUrl = ws.currentUser.photoUrl || null;
    } else {
      // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      userId = localStorage.getItem('testUserId') || 123456789;
      nickname = 'Test';
      photoUrl = null;
    }

    console.log('üí∞ Crash: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É:', { userId, nickname, bet: amount });

    ws.socket.emit('place_bet', {
      game: 'crash',
      userId,
      nickname,
      photoUrl,
      bet: amount
    });
  }

  // –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
  function cashout() {
    if (!ws) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || 
                   localStorage.getItem('testUserId') || 
                   123456789;

    console.log('üíµ Crash: –ó–∞–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à');

    ws.socket.emit('crash_cashout', {
      game: 'crash',
      userId
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã –∏–≥—Ä—ã (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è DOM)
  function updateGamePhase(phase) {
    const waitingPanel = document.getElementById('waitingPanel');
    const crashPanel = document.getElementById('crashPanel');
    const gameCanvas = document.getElementById('gameCanvas');
    
    if (!waitingPanel || !crashPanel) return;
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const gameContainer = document.querySelector('.game');
    if (gameContainer) {
      gameContainer.classList.remove('waiting', 'flying', 'crashed');
    }
    
    switch(phase) {
      case 'waiting':
        waitingPanel.style.display = 'flex';
        crashPanel.style.display = 'none';
        if (gameContainer) gameContainer.classList.add('waiting');
        console.log('üîÑ –§–∞–∑–∞: WAITING');
        break;
        
      case 'betting':
        waitingPanel.style.display = 'flex';
        crashPanel.style.display = 'none';
        if (gameContainer) gameContainer.classList.add('waiting');
        console.log('üí∞ –§–∞–∑–∞: BETTING');
        break;
        
      case 'flying':
        waitingPanel.style.display = 'none';
        crashPanel.style.display = 'flex';
        if (gameContainer) gameContainer.classList.add('flying');
        console.log('üöÄ –§–∞–∑–∞: FLYING');
        break;
        
      case 'crashed':
        crashPanel.style.display = 'flex';
        if (gameContainer) gameContainer.classList.add('crashed');
        console.log('üí• –§–∞–∑–∞: CRASHED');
        break;
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (–±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏)
  function updatePlayersUI() {
    const playersList = document.querySelector('.user-templates');
    if (!playersList) return;

    // –ù–ï –æ—á–∏—â–∞–µ–º - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º

    gameState.players.forEach(player => {
      if (!player || !player.userId || !player.nickname) return;
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
      let playerEl = playersList.querySelector(`[data-player-id="${player.userId}"]`);
      
      if (!playerEl) {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç
        playerEl = document.createElement('div');
        playerEl.className = 'default bet-fade-in';
        playerEl.setAttribute('data-player-id', player.userId);
      
      let avatarHTML = '';
      if (player.photoUrl) {
        avatarHTML = `<div class="avatar-3" style="background-image: url(${player.photoUrl}); background-size: cover; background-position: center;"></div>`;
      } else {
        const initial = player.nickname ? player.nickname[0].toUpperCase() : 'P';
        avatarHTML = `<div class="avatar-3" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 14px;">${initial}</div>`;
      }
      
      // –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–∏–∫ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É)
      const maskedNick = player.nickname.length > 2 
        ? player.nickname[0] + '***' + player.nickname[player.nickname.length - 1]
        : player.nickname;
      
      const multiplierText = player.multiplier ? `${player.multiplier.toFixed(2)}x` : '-';
      const cashoutText = player.cashout ? player.cashout.toFixed(0) : '-';
      
      playerEl.innerHTML = `
        <div class="acc-inf-2">
          <div class="avatar-wrapper">${avatarHTML}</div>
          <div class="n-k"><div class="text-wrapper-26">${maskedNick}</div></div>
        </div>
        <div class="div-wrapper-3"><div class="text-wrapper-27">${player.bet}</div></div>
        <div class="div-wrapper-3"><div class="text-wrapper-27">${multiplierText}</div></div>
        <div class="div-wrapper-4"><div class="text-wrapper-28">${cashoutText}</div></div>
      `;
        
        playersList.appendChild(playerEl);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        const betEl = playerEl.querySelector('.text-wrapper-27');
        const multiplierEl = playerEl.querySelectorAll('.text-wrapper-27')[1];
        const cashoutEl = playerEl.querySelector('.text-wrapper-28');
        
        if (betEl) betEl.textContent = player.bet;
        if (multiplierEl) multiplierEl.textContent = player.multiplier ? `${player.multiplier.toFixed(2)}x` : '-';
        if (cashoutEl) cashoutEl.textContent = player.cashout ? player.cashout.toFixed(0) : '-';
      }
    });
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –∫–æ–≥–æ –Ω–µ—Ç –≤ gameState
    const currentPlayerIds = new Set(gameState.players.map(p => p.userId));
    const allPlayerEls = playersList.querySelectorAll('[data-player-id]');
    allPlayerEls.forEach(el => {
      const playerId = el.getAttribute('data-player-id');
      if (!currentPlayerIds.has(playerId)) {
        el.style.opacity = '0';
        setTimeout(() => el.remove(), 300);
      }
    });
  }

  // –≠–∫—Å–ø–æ—Ä—Ç
  window.CrashSync = {
    placeBet,
    cashout,
    getState: () => gameState
  };

  // –ó–∞–ø—É—Å–∫
  waitForWebSocket();

  console.log('‚úÖ Crash Sync –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

})();
