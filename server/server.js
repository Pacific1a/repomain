const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: [
      "https://repomain-nine.vercel.app",
      "http://localhost:*",
      "http://127.0.0.1:*",
      "*"
    ],
    methods: ["GET", "POST"],
    credentials: true
  }
});

// Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: [
        "'self'", 
        "'unsafe-inline'", 
        "https://telegram.org",
        "https://cdn.socket.io"
      ],
      styleSrc: [
        "'self'", 
        "'unsafe-inline'",
        "https://cdnjs.cloudflare.com",
        "https://fonts.googleapis.com"
      ],
      imgSrc: [
        "'self'", 
        "data:", 
        "https:", 
        "http:",
        "https://raw.githubusercontent.com",
        "https://github.com"
      ],
      connectSrc: [
        "'self'",
        "https:",
        "wss:",
        "ws:"
      ],
      fontSrc: [
        "'self'", 
        "data:", 
        "https:",
        "https://fonts.gstatic.com"
      ],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'self'"]
    }
  }
}));
app.use(cors());
app.use(express.json());

// –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const possiblePaths = [
  path.join(__dirname, '..'), // –õ–æ–∫–∞–ª—å–Ω–æ
  '/opt/render/project/src', // Render
  process.cwd(), // –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
];

let staticPath = possiblePaths[0];
for (const p of possiblePaths) {
  if (fs.existsSync(path.join(p, 'index.html'))) {
    staticPath = p;
    break;
  }
}

console.log('üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑:', staticPath);
app.use(express.static(staticPath));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤
});
app.use('/api/', limiter);

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const MONGODB_URI = process.env.MONGODB_URI;
if (MONGODB_URI && MONGODB_URI.trim() !== '') {
  mongoose.connect(MONGODB_URI, {
    serverSelectionTimeoutMS: 5000, // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
  })
    .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
    .catch(err => {
      console.error('‚ùå MongoDB –æ—à–∏–±–∫–∞:', err.message);
      console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ MongoDB (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)');
    });
} else {
  console.log('‚ö†Ô∏è MongoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)');
}

// –ú–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
let User, Room, GameHistory;
if (MONGODB_URI && MONGODB_URI.trim() !== '') {
  try {
    User = require('./models/User');
    Room = require('./models/Room');
    GameHistory = require('./models/GameHistory');
  } catch (err) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π MongoDB:', err.message);
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–Ω–∞—Ç
const onlineUsers = new Map(); // socketId -> userData
const activeRooms = new Map(); // roomId -> roomData
const userSockets = new Map(); // userId -> socketId

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä
const globalGames = {
  roll: {
    status: 'waiting',
    players: [],
    timer: 60, // 1 –º–∏–Ω—É—Ç–∞
    startTime: null,
    timerInterval: null
  }
};

// –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (JSON —Ñ–∞–π–ª—ã)
const DATA_DIR = path.join(__dirname, 'data');
const ROOMS_FILE = path.join(DATA_DIR, 'rooms.json');
const HISTORY_FILE = path.join(DATA_DIR, 'history.json');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data/');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤
function loadPersistedData() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã
    if (fs.existsSync(ROOMS_FILE)) {
      const roomsData = JSON.parse(fs.readFileSync(ROOMS_FILE, 'utf8'));
      roomsData.forEach(room => {
        room.createdAt = new Date(room.createdAt);
        activeRooms.set(room.id, room);
      });
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${roomsData.length} –∫–æ–º–Ω–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª—ã
function savePersistedData() {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã
    const roomsData = Array.from(activeRooms.values());
    fs.writeFileSync(ROOMS_FILE, JSON.stringify(roomsData, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(savePersistedData, 30000);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadPersistedData();

// ============ SOCKET.IO EVENTS ============

io.on('connection', (socket) => {
  console.log(`üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('auth', async (telegramData) => {
    try {
      const { id, first_name, username, photo_url } = telegramData;
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user;
      if (User) {
        user = await User.findOne({ telegramId: id });
        
        if (!user) {
          user = new User({
            telegramId: id,
            firstName: first_name,
            username: username,
            photoUrl: photo_url,
            nickname: first_name || username || `Player${id}`,
            stats: {
              gamesPlayed: 0,
              gamesWon: 0,
              totalWinnings: 0
            }
          });
          await user.save();
          console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.nickname}`);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          user.firstName = first_name;
          user.username = username;
          user.photoUrl = photo_url;
          user.lastSeen = new Date();
          await user.save();
        }
      } else {
        // –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ë–î
        user = {
          _id: id,
          telegramId: id,
          nickname: first_name || username || `Player${id}`,
          photoUrl: photo_url,
          stats: { gamesPlayed: 0, gamesWon: 0, totalWinnings: 0 }
        };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–Ω–ª–∞–π–Ω
      onlineUsers.set(socket.id, {
        socketId: socket.id,
        userId: user._id.toString(),
        telegramId: id,
        nickname: user.nickname,
        photoUrl: photo_url,
        isOnline: true
      });
      
      userSockets.set(user._id.toString(), socket.id);

      socket.emit('auth_success', {
        user: {
          id: user._id,
          telegramId: user.telegramId,
          nickname: user.nickname,
          photoUrl: user.photoUrl,
          stats: user.stats
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–º
      io.emit('online_users', Array.from(onlineUsers.values()));
      
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user.nickname} (${socket.id})`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      socket.emit('auth_error', { message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  socket.on('get_online_users', () => {
    socket.emit('online_users', Array.from(onlineUsers.values()));
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.on('get_rooms', () => {
    const rooms = Array.from(activeRooms.values()).map(room => ({
      id: room.id,
      name: room.name,
      game: room.game,
      players: room.players.length,
      maxPlayers: room.maxPlayers,
      isPrivate: room.isPrivate,
      status: room.status
    }));
    socket.emit('rooms_list', rooms);
  });

  // –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
  socket.on('create_room', async (roomData) => {
    try {
      const user = onlineUsers.get(socket.id);
      if (!user) {
        socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        return;
      }

      const roomId = `room_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      const room = {
        id: roomId,
        name: roomData.name || `${user.nickname}'s room`,
        game: roomData.game || 'roll',
        hostId: user.userId,
        players: [{
          userId: user.userId,
          socketId: socket.id,
          nickname: user.nickname,
          photoUrl: user.photoUrl,
          isReady: false,
          isHost: true
        }],
        maxPlayers: roomData.maxPlayers || 3,
        isPrivate: roomData.isPrivate || false,
        status: 'waiting', // waiting, playing, finished
        gameState: {},
        createdAt: new Date()
      };

      activeRooms.set(roomId, room);
      socket.join(roomId);
      
      socket.emit('room_created', room);
      io.emit('room_added', {
        id: room.id,
        name: room.name,
        game: room.game,
        players: room.players.length,
        maxPlayers: room.maxPlayers,
        isPrivate: room.isPrivate,
        status: room.status
      });

      console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${room.name} (${roomId})`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
    }
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('join_room', (roomId) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!user) {
        socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        return;
      }

      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }

      if (room.players.length >= room.maxPlayers) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const alreadyInRoom = room.players.find(p => p.userId === user.userId);
      if (alreadyInRoom) {
        socket.emit('error', { message: '–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ' });
        return;
      }

      room.players.push({
        userId: user.userId,
        socketId: socket.id,
        nickname: user.nickname,
        photoUrl: user.photoUrl,
        isReady: false,
        isHost: false
      });

      socket.join(roomId);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('player_joined', {
        player: {
          userId: user.userId,
          nickname: user.nickname,
          photoUrl: user.photoUrl
        },
        room: room
      });

      socket.emit('room_joined', room);
      
      console.log(`üë§ ${user.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
    }
  });

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
  socket.on('leave_room', (roomId) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!room) return;

      room.players = room.players.filter(p => p.socketId !== socket.id);
      socket.leave(roomId);

      if (room.players.length === 0) {
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
        activeRooms.delete(roomId);
        io.emit('room_removed', roomId);
        console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: ${room.name}`);
      } else {
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (user && room.hostId === user.userId) {
          room.hostId = room.players[0].userId;
          room.players[0].isHost = true;
        }
        
        io.to(roomId).emit('player_left', {
          userId: user?.userId,
          room: room
        });
      }

      console.log(`üëã ${user?.nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', error);
    }
  });

  // –ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤
  socket.on('player_ready', (roomId) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!room) return;

      const player = room.players.find(p => p.socketId === socket.id);
      if (player) {
        player.isReady = !player.isReady;
        io.to(roomId).emit('room_update', room);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –≥–æ—Ç–æ–≤—ã
        const allReady = room.players.every(p => p.isReady);
        if (allReady && room.players.length >= 2) {
          room.status = 'playing';
          io.to(roomId).emit('game_start', room);
          console.log(`üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞:', error);
    }
  });

  // –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ –∏–≥—Ä–µ
  socket.on('make_move', async ({ roomId, move, gameData }) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!room || !user) return;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã)
      const isValidMove = validateMove(room.game, room.gameState, move, user.userId);
      
      if (!isValidMove) {
        socket.emit('invalid_move', { message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥' });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      room.gameState = updateGameState(room.game, room.gameState, move, user.userId, gameData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('game_update', {
        gameState: room.gameState,
        move: move,
        player: {
          userId: user.userId,
          nickname: user.nickname
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
      const gameResult = checkGameEnd(room.game, room.gameState);
      if (gameResult.isFinished) {
        room.status = 'finished';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        await saveGameHistory(room, gameResult);
        
        io.to(roomId).emit('game_end', {
          winner: gameResult.winner,
          results: gameResult.results
        });

        console.log(`üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞' });
    }
  });

  // ============ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ò–ì–† ============

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
  socket.on('join_global_game', ({ game }) => {
    socket.join(`global_${game}`);
    console.log(`üåç –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ: ${game}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—á–∏—Å—Ç–∞—è –∫–æ–ø–∏—è –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫)
    const cleanState = {
      status: globalGames[game].status,
      players: globalGames[game].players.map(p => ({
        userId: p.userId,
        nickname: p.nickname,
        photoUrl: p.photoUrl,
        bet: p.bet
      })),
      timer: globalGames[game].timer,
      startTime: globalGames[game].startTime ? globalGames[game].startTime.toISOString() : null
    };
    socket.emit('game_state_sync', cleanState);
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  socket.on('get_game_state', ({ game }) => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é –∫–æ–ø–∏—é –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    const cleanState = {
      status: globalGames[game].status,
      players: globalGames[game].players.map(p => ({
        userId: p.userId,
        nickname: p.nickname,
        photoUrl: p.photoUrl,
        bet: p.bet
      })),
      timer: globalGames[game].timer,
      startTime: globalGames[game].startTime ? globalGames[game].startTime.toISOString() : null
    };
    socket.emit('game_state_sync', cleanState);
  });

  // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
  socket.on('place_bet', ({ game, userId, nickname, photoUrl, bet }) => {
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞:`, { game, userId, nickname, bet });
    
    const gameState = globalGames[game];
    
    if (!gameState) {
      console.error(`‚ùå –ò–≥—Ä–∞ ${game} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const existingPlayer = gameState.players.find(p => p.userId === userId);
    if (existingPlayer) {
      existingPlayer.bet += bet;
      console.log(`‚ûï –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ ${nickname}: ${existingPlayer.bet}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
      const cleanPlayer = {
        userId: userId,
        nickname: nickname,
        photoUrl: photoUrl || null,
        bet: bet
      };
      gameState.players.push(cleanPlayer);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ ${nickname} —Å–æ —Å—Ç–∞–≤–∫–æ–π ${bet}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)
    io.to(`global_${game}`).emit('player_bet', { 
      userId: userId, 
      nickname: nickname, 
      photoUrl: photoUrl || null, 
      bet: bet 
    });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ global_${game}, –∏–≥—Ä–æ–∫–æ–≤: ${gameState.players.length}`);

    // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (gameState.status === 'waiting' && gameState.players.length === 1) {
      console.log(`üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É ${game} - –ø–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞`);
      startGlobalGame(game);
    }
  });

  // –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã
  function startGlobalGame(game) {
    const gameState = globalGames[game];
    gameState.status = 'betting';
    gameState.startTime = new Date();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    io.to(`global_${game}`).emit('game_started', {
      startTime: gameState.startTime.toISOString(), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Date –≤ —Å—Ç—Ä–æ–∫—É
      timer: gameState.timer
    });

    console.log(`üéÆ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ ${game} –Ω–∞—á–∞–ª–∞—Å—å! –¢–∞–π–º–µ—Ä: ${gameState.timer}—Å`);

    // –¢–∞–π–º–µ—Ä
    gameState.timerInterval = setTimeout(() => {
      spinGlobalGame(game);
    }, gameState.timer * 1000);
  }

  // –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ
  function spinGlobalGame(game) {
    const gameState = globalGames[game];
    
    if (gameState.players.length === 0) {
      gameState.status = 'waiting';
      return;
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –≤–µ—Å–∞–º
    const totalBets = gameState.players.reduce((sum, p) => sum + p.bet, 0);
    const random = Math.random() * totalBets;
    let sum = 0;
    let winner = gameState.players[0];

    for (const player of gameState.players) {
      sum += player.bet;
      if (random <= sum) {
        winner = player;
        break;
      }
    }

    console.log(`üé∞ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ ${game}: ${winner.nickname}`);

    io.to(`global_${game}`).emit('spin_wheel', { winner: winner.userId });

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      io.to(`global_${game}`).emit('game_finished', { winner: winner.userId });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      gameState.status = 'waiting';
      gameState.players = [];
      gameState.startTime = null;
      
      console.log(`üèÅ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ ${game} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    }, 5000);
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    const user = onlineUsers.get(socket.id);
    
    if (user) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
      activeRooms.forEach((room, roomId) => {
        const playerIndex = room.players.findIndex(p => p.socketId === socket.id);
        if (playerIndex !== -1) {
          room.players.splice(playerIndex, 1);
          
          if (room.players.length === 0) {
            activeRooms.delete(roomId);
            io.emit('room_removed', roomId);
          } else {
            io.to(roomId).emit('player_left', {
              userId: user.userId,
              room: room
            });
          }
        }
      });

      onlineUsers.delete(socket.id);
      userSockets.delete(user.userId);
      
      io.emit('online_users', Array.from(onlineUsers.values()));
      console.log(`‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${user.nickname} (${socket.id})`);
    }
  });
});

// ============ HELPER FUNCTIONS ============

function validateMove(game, gameState, move, userId) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  return true;
}

function updateGameState(game, gameState, move, userId, gameData) {
  // TODO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  if (!gameState.moves) gameState.moves = [];
  gameState.moves.push({ userId, move, timestamp: new Date(), ...gameData });
  return gameState;
}

function checkGameEnd(game, gameState) {
  // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  return { isFinished: false, winner: null, results: {} };
}

async function saveGameHistory(room, gameResult) {
  try {
    const historyEntry = {
      roomId: room.id,
      game: room.game,
      players: room.players.map(p => ({
        userId: p.userId,
        nickname: p.nickname,
        bet: gameResult.bets?.[p.userId] || 0,
        winnings: gameResult.winnings?.[p.userId] || 0,
        isWinner: gameResult.winner === p.userId
      })),
      winner: gameResult.winner,
      gameState: room.gameState,
      duration: Date.now() - room.createdAt.getTime(),
      createdAt: new Date()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (GameHistory) {
      const history = new GameHistory(historyEntry);
      await history.save();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB');
    } else {
      // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
      let historyData = [];
      if (fs.existsSync(HISTORY_FILE)) {
        historyData = JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf8'));
      }
      historyData.push(historyEntry);
      
      // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
      if (historyData.length > 1000) {
        historyData = historyData.slice(-1000);
      }
      
      fs.writeFileSync(HISTORY_FILE, JSON.stringify(historyData, null, 2));
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ JSON —Ñ–∞–π–ª');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
}

// ============ REST API ============

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'index.html'));
});

app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date() });
});

app.get('/api/stats', async (req, res) => {
  try {
    let totalUsers = 0;
    let totalGames = 0;

    if (User && GameHistory) {
      totalUsers = await User.countDocuments();
      totalGames = await GameHistory.countDocuments();
    } else {
      // –ß–∏—Ç–∞–µ–º –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
      if (fs.existsSync(HISTORY_FILE)) {
        const historyData = JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf8'));
        totalGames = historyData.length;
      }
    }
    
    res.json({
      totalUsers,
      totalGames,
      onlineUsers: onlineUsers.size,
      activeRooms: activeRooms.size,
      usingMongoDB: !!User
    });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/api/history', (req, res) => {
  try {
    let historyData = [];
    
    if (fs.existsSync(HISTORY_FILE)) {
      historyData = JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf8'));
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–≥—Ä
    res.json(historyData.slice(-50).reverse());
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º`);
  console.log(`üíæ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${DATA_DIR}`);
  console.log(`üóÑÔ∏è MongoDB: ${MONGODB_URI && MONGODB_URI.trim() !== '' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON)'}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  savePersistedData();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  savePersistedData();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  process.exit(0);
});
