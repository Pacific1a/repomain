const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: [
      "https://repomain-nine.vercel.app",
      "http://localhost:*",
      "http://127.0.0.1:*",
      "*"
    ],
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['websocket', 'polling'],
  allowEIO3: true
});

console.log('üì° Socket.IO server initialized');

// Namespace –¥–ª—è live prizes (–≤–º–µ—Å—Ç–æ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ WebSocket)
const livePrizesNamespace = io.of('/live-prizes');
const recentWins = [];
const MAX_RECENT_WINS = 20;

livePrizesNamespace.on('connection', (socket) => {
  console.log('‚úÖ Live Prizes client connected:', socket.id);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
  socket.emit('init', { wins: recentWins });
  
  socket.on('win', (data) => {
    const winData = {
      prize: data.prize,
      isChips: data.isChips,
      color: data.color,
      imagePath: data.imagePath,
      timestamp: Date.now()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    recentWins.push(winData);
    if (recentWins.length > MAX_RECENT_WINS) {
      recentWins.shift();
    }
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    livePrizesNamespace.emit('new_win', { win: winData });
    
    console.log(`üì£ Broadcast win: ${data.prize}${data.isChips ? ' chips' : '‚ÇΩ'}`);
  });
  
  socket.on('disconnect', () => {
    console.log('‚ùå Live Prizes client disconnected:', socket.id);
  });
});

// Trust proxy - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞ –ø—Ä–æ–∫—Å–∏ (Render, Heroku –∏ —Ç.–¥.)
app.set('trust proxy', 1);

// Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: [
        "'self'", 
        "'unsafe-inline'", 
        "https://telegram.org",
        "https://cdn.socket.io"
      ],
      styleSrc: [
        "'self'", 
        "'unsafe-inline'",
        "https://cdnjs.cloudflare.com",
        "https://fonts.googleapis.com"
      ],
      imgSrc: [
        "'self'", 
        "data:", 
        "https:", 
        "http:",
        "https://raw.githubusercontent.com",
        "https://github.com"
      ],
      connectSrc: [
        "'self'",
        "https:",
        "wss:",
        "ws:"
      ],
      fontSrc: [
        "'self'", 
        "data:", 
        "https:",
        "https://fonts.gstatic.com"
      ],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'self'"]
    }
  }
}));
app.use(cors());
app.use(express.json());

// –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const possiblePaths = [
  path.join(__dirname, '..'), // –õ–æ–∫–∞–ª—å–Ω–æ
  '/opt/render/project/src', // Render
  process.cwd(), // –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
];

let staticPath = possiblePaths[0];
for (const p of possiblePaths) {
  if (fs.existsSync(path.join(p, 'index.html'))) {
    staticPath = p;
    break;
  }
}

console.log('üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑:', staticPath);
app.use(express.static(staticPath));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤
});
app.use('/api/', limiter);

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const MONGODB_URI = process.env.MONGODB_URI;
if (MONGODB_URI && MONGODB_URI.trim() !== '') {
  mongoose.connect(MONGODB_URI, {
    serverSelectionTimeoutMS: 5000, // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
  })
    .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
    .catch(err => {
      console.error('‚ùå MongoDB –æ—à–∏–±–∫–∞:', err.message);
      console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ MongoDB (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)');
    });
} else {
  console.log('‚ö†Ô∏è MongoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)');
}

// –ú–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
let User, Room, GameHistory;
if (MONGODB_URI && MONGODB_URI.trim() !== '') {
  try {
    User = require('./models/User');
    Room = require('./models/Room');
    GameHistory = require('./models/GameHistory');
  } catch (err) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π MongoDB:', err.message);
  }
}
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–Ω–∞—Ç
const onlineUsers = new Map(); // socketId -> userData
const activeRooms = new Map(); // roomId -> roomData
const userSockets = new Map(); // userId -> socketId

// –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
const colors = [
  '#bde0fe', '#ffafcc', '#ade8f4', '#edede9', '#6f2dbd',
  '#b8c0ff', '#ff9e00', '#826aed', '#ffff3f', '#1dd3b0',
  '#ffd449', '#54defd', '#2fe6de', '#00f2f2', '#2d00f7',
  '#00ccf5', '#00f59b', '#7014f2', '#ff00ff', '#ffe017',
  '#44d800', '#ff8c00', '#ff3800', '#fff702', '#00ffff',
  '#00ffe0', '#00ffc0', '#00ffa0', '#00ffff', '#8000ff',
  '#02b3f6'
];

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–≤–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ (userId -> color)
const playerColors = new Map();
const usedColors = new Set();

function getPlayerColor(userId) {
  if (!playerColors.has(userId)) {
    // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Ü–≤–µ—Ç (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏)
    let availableColors = colors.filter(color => !usedColors.has(color));
    
    // –ï—Å–ª–∏ –≤—Å–µ —Ü–≤–µ—Ç–∞ –∑–∞–Ω—è—Ç—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if (availableColors.length === 0) {
      usedColors.clear();
      availableColors = [...colors];
    }
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Ü–≤–µ—Ç
    const randomColor = availableColors[Math.floor(Math.random() * availableColors.length)];
    playerColors.set(userId, randomColor);
    console.log(`üé® –ò–≥—Ä–æ–∫ ${userId} –ø–æ–ª—É—á–∏–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç ${randomColor}`);
  }
  return playerColors.get(userId);
}

// ============ ROLL BOTS SYSTEM ============
const ROLL_BOTS = [
  { id: 'bot_den', nickname: 'den', photoUrl: '/roll/aaaaasdasfd.png' },
  { id: 'bot_sagarius', nickname: 'Sagarius', photoUrl: '/roll/aagsagsags.png' },
  { id: 'bot_dev_fenomen', nickname: 'dev_fenomen', photoUrl: '/roll/asaggasad.png' },
  { id: 'bot_majer', nickname: 'Majer', photoUrl: '/roll/asd;plaksf;lkapowjrawkdsad.png' },
  { id: 'bot_ovi', nickname: 'OVI', photoUrl: '/roll/asdagaghagsdasg.png' },
  { id: 'bot_user', nickname: 'User', photoUrl: '/roll/asdasdasfasgfasd.png' },
  { id: 'bot_mr_baton', nickname: 'Mr.Baton', photoUrl: '/roll/asdeasfagasdas.png' },
  { id: 'bot_wal', nickname: 'Wal?!!?', photoUrl: '/roll/asfahgsh.png' },
  { id: 'bot_r1mskyy', nickname: 'r1mskyy', photoUrl: '/roll/ashgahh.png' },
  { id: 'bot_crownfall', nickname: 'crownfall', photoUrl: '/roll/sdsdffsdsddfsdfsdf.png' }
];

// –°—Ç–∞–≤–∫–∏ –±–æ—Ç–æ–≤ (—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –æ—Ç 100 –¥–æ 2000)
const BOT_BET_MIN = 100;
const BOT_BET_MAX = 2000;
const BOT_BET_INTERVAL = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏

// –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const activeBotsData = new Map(); // botId -> { gamesPlayed, betTimer }

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –±–æ—Ç–æ–≤ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞ ID –∏ –∞–≤–∞—Ç–∞—Ä–æ–∫)
function getRandomBots(count) {
  const botsToAdd = [];
  const selectedIds = new Set();
  const usedAvatars = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
  const shuffled = [...ROLL_BOTS].sort(() => Math.random() - 0.5);
  
  // –°–æ–±–∏—Ä–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
  const gameState = globalGames.roll;
  gameState.activeBots.forEach(activeBot => {
    usedAvatars.add(activeBot.photoUrl);
  });
  
  for (let i = 0; i < count && i < shuffled.length; i++) {
    const bot = shuffled[i];
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç–∞ –µ—â–µ –Ω–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    const alreadyActive = gameState.activeBots.find(b => b.id === bot.id);
    
    if (!alreadyActive && !selectedIds.has(bot.id) && !usedAvatars.has(bot.photoUrl)) {
      botsToAdd.push(bot);
      selectedIds.add(bot.id);
      usedAvatars.add(bot.photoUrl);
    }
  }
  
  return botsToAdd;
}

// –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–æ–≤ –≤ –∏–≥—Ä—É
function addBotsToRoll(count) {
  const gameState = globalGames.roll;
  
  // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –≤ waiting)
  if (gameState.status !== 'waiting') {
    console.log(`‚ö†Ô∏è –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (—Å—Ç–∞—Ç—É—Å: ${gameState.status})`);
    return;
  }
  
  const botsToAdd = getRandomBots(count);
  
  botsToAdd.forEach(bot => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç–∞ –µ—â–µ –Ω–µ—Ç
    if (!gameState.activeBots.find(b => b.id === bot.id)) {
      gameState.activeBots.push({
        id: bot.id,
        nickname: bot.nickname,
        photoUrl: bot.photoUrl,
        gamesPlayed: 0
      });
      
      activeBotsData.set(bot.id, {
        gamesPlayed: 0,
        betTimer: null
      });
      
      console.log(`ü§ñ –ë–æ—Ç ${bot.nickname} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É`);
    }
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ io.on('connection') –ø–æ—Å–ª–µ startGlobalGame

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã (–æ–¥–Ω–∞ –∏–≥—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
const globalGames = {
  speedcash: {
    status: 'betting', // betting, racing, finished
    bettingTime: 5,
    blueMultiplier: 1.00,
    orangeMultiplier: 1.00,
    blueStopMultiplier: null,
    orangeStopMultiplier: null,
    delayedCar: null, // 'blue', 'orange', 'both', null
    winner: null,
    raceStartTime: null,
    bettingTimer: null,
    raceInterval: null,
    isInitialized: false
  },
  roll: {
    status: 'waiting', // waiting, betting, spinning
    players: [],
    timer: 30, // 30 —Å–µ–∫—É–Ω–¥
    startTime: null,
    timerInterval: null,
    winner: null,
    totalBet: 0,
    bets: {},
    activeBots: [] // –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  },
  crash: {
    status: 'waiting', // waiting, flying, crashed
    players: [],
    multiplier: 1.00,
    crashPoint: null,
    startTime: null,
    gameInterval: null,
    waitingTimer: null,
    waitingTime: 5, // 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
    isInitialized: false // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  },
  blackjack: {
    status: 'waiting', // waiting
    players: [], // –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏
    history: [], // –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
    isInitialized: false
  }
};

// –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (JSON —Ñ–∞–π–ª—ã)
const DATA_DIR = path.join(__dirname, 'data');
const ROOMS_FILE = path.join(DATA_DIR, 'rooms.json');
const HISTORY_FILE = path.join(DATA_DIR, 'history.json');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data/');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤
function loadPersistedData() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã
    if (fs.existsSync(ROOMS_FILE)) {
      const roomsData = JSON.parse(fs.readFileSync(ROOMS_FILE, 'utf8'));
      roomsData.forEach(room => {
        room.createdAt = new Date(room.createdAt);
        activeRooms.set(room.id, room);
      });
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${roomsData.length} –∫–æ–º–Ω–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª—ã
function savePersistedData() {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã
    const roomsData = Array.from(activeRooms.values());
    fs.writeFileSync(ROOMS_FILE, JSON.stringify(roomsData, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(savePersistedData, 30000);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadPersistedData();

// ============ SOCKET.IO EVENTS ============

io.on('connection', (socket) => {
  console.log(`üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('auth', async (telegramData) => {
    try {
      const { id, first_name, username, photo_url } = telegramData;
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user;
      if (User) {
        user = await User.findOne({ telegramId: id });
        
        if (!user) {
          user = new User({
            telegramId: id,
            firstName: first_name,
            username: username,
            photoUrl: photo_url,
            nickname: first_name || username || `Player${id}`,
            stats: {
              gamesPlayed: 0,
              gamesWon: 0,
              totalWinnings: 0
            }
          });
          await user.save();
          console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.nickname}`);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          user.firstName = first_name;
          user.username = username;
          user.photoUrl = photo_url;
          user.lastSeen = new Date();
          await user.save();
        }
      } else {
        // –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ë–î
        user = {
          _id: id,
          telegramId: id,
          nickname: first_name || username || `Player${id}`,
          photoUrl: photo_url,
          stats: { gamesPlayed: 0, gamesWon: 0, totalWinnings: 0 }
        };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–Ω–ª–∞–π–Ω
      onlineUsers.set(socket.id, {
        socketId: socket.id,
        userId: user._id.toString(),
        telegramId: id,
        nickname: user.nickname,
        photoUrl: photo_url,
        isOnline: true
      });
      
      userSockets.set(user._id.toString(), socket.id);

      socket.emit('auth_success', {
        user: {
          id: user._id,
          telegramId: user.telegramId,
          nickname: user.nickname,
          photoUrl: user.photoUrl,
          stats: user.stats
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–º
      io.emit('online_users', Array.from(onlineUsers.values()));
      
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user.nickname} (${socket.id})`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      socket.emit('auth_error', { message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  socket.on('get_online_users', () => {
    socket.emit('online_users', Array.from(onlineUsers.values()));
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.on('get_rooms', () => {
    const rooms = Array.from(activeRooms.values()).map(room => ({
      id: room.id,
      name: room.name,
      game: room.game,
      players: room.players.length,
      maxPlayers: room.maxPlayers,
      isPrivate: room.isPrivate,
      status: room.status
    }));
    socket.emit('rooms_list', rooms);
  });

  // –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
  socket.on('create_room', async (roomData) => {
    try {
      const user = onlineUsers.get(socket.id);
      if (!user) {
        socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        return;
      }

      const roomId = `room_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      const room = {
        id: roomId,
        name: roomData.name || `${user.nickname}'s room`,
        game: roomData.game || 'roll',
        hostId: user.userId,
        players: [{
          userId: user.userId,
          socketId: socket.id,
          nickname: user.nickname,
          photoUrl: user.photoUrl,
          isReady: false,
          isHost: true
        }],
        maxPlayers: roomData.maxPlayers || 3,
        isPrivate: roomData.isPrivate || false,
        status: 'waiting', // waiting, playing, finished
        gameState: {},
        createdAt: new Date()
      };

      activeRooms.set(roomId, room);
      socket.join(roomId);
      
      socket.emit('room_created', room);
      io.emit('room_added', {
        id: room.id,
        name: room.name,
        game: room.game,
        players: room.players.length,
        maxPlayers: room.maxPlayers,
        isPrivate: room.isPrivate,
        status: room.status
      });

      console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${room.name} (${roomId})`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
    }
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('join_room', (roomId) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!user) {
        socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        return;
      }

      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }

      if (room.players.length >= room.maxPlayers) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const alreadyInRoom = room.players.find(p => p.userId === user.userId);
      if (alreadyInRoom) {
        socket.emit('error', { message: '–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ' });
        return;
      }

      room.players.push({
        userId: user.userId,
        socketId: socket.id,
        nickname: user.nickname,
        photoUrl: user.photoUrl,
        isReady: false,
        isHost: false
      });

      socket.join(roomId);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('player_joined', {
        player: {
          userId: user.userId,
          nickname: user.nickname,
          photoUrl: user.photoUrl
        },
        room: room
      });

      socket.emit('room_joined', room);
      
      console.log(`üë§ ${user.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
    }
  });

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
  socket.on('leave_room', (roomId) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!room) return;

      room.players = room.players.filter(p => p.socketId !== socket.id);
      socket.leave(roomId);

      if (room.players.length === 0) {
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
        activeRooms.delete(roomId);
        io.emit('room_removed', roomId);
        console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: ${room.name}`);
      } else {
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (user && room.hostId === user.userId) {
          room.hostId = room.players[0].userId;
          room.players[0].isHost = true;
        }
        
        io.to(roomId).emit('player_left', {
          userId: user?.userId,
          room: room
        });
      }

      console.log(`üëã ${user?.nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', error);
    }
  });

  // –ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤
  socket.on('player_ready', (roomId) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!room) return;

      const player = room.players.find(p => p.socketId === socket.id);
      if (player) {
        player.isReady = !player.isReady;
        io.to(roomId).emit('room_update', room);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –≥–æ—Ç–æ–≤—ã
        const allReady = room.players.every(p => p.isReady);
        if (allReady && room.players.length >= 2) {
          room.status = 'playing';
          io.to(roomId).emit('game_start', room);
          console.log(`üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞:', error);
    }
  });

  // –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ –∏–≥—Ä–µ
  socket.on('make_move', async ({ roomId, move, gameData }) => {
    try {
      const user = onlineUsers.get(socket.id);
      const room = activeRooms.get(roomId);

      if (!room || !user) return;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã)
      const isValidMove = validateMove(room.game, room.gameState, move, user.userId);
      
      if (!isValidMove) {
        socket.emit('invalid_move', { message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥' });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      room.gameState = updateGameState(room.game, room.gameState, move, user.userId, gameData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('game_update', {
        gameState: room.gameState,
        move: move,
        player: {
          userId: user.userId,
          nickname: user.nickname
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
      const gameResult = checkGameEnd(room.game, room.gameState);
      if (gameResult.isFinished) {
        room.status = 'finished';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        await saveGameHistory(room, gameResult);
        
        io.to(roomId).emit('game_end', {
          winner: gameResult.winner,
          results: gameResult.results
        });
        console.log(`üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞' });
    }
  });

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
  socket.on('join_game', ({ game }) => {
    socket.join(`global_${game}`);
    console.log(`üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ global_${game}`);
    
    const gameState = globalGames[game];
    if (gameState) {
      // –î–ª—è blackjack –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if (game === 'blackjack') {
        socket.emit('game_state_sync', {
          game: 'blackjack',
          status: gameState.status,
          players: gameState.players.map(p => ({
            userId: p.userId,
            nickname: p.nickname,
            photoUrl: p.photoUrl,
            lastSeen: p.lastSeen
          })),
          history: gameState.history
        });
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        socket.emit('game_state_sync', {
          game: game,
          status: gameState.status,
          players: gameState.players.map(p => ({
            userId: p.userId,
            nickname: p.nickname,
            photoUrl: p.photoUrl,
            bet: p.bet,
            color: p.color,
            isBot: p.isBot || String(p.userId).startsWith('bot_') // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –±–æ—Ç–∞
          })),
          startTime: gameState.startTime
        });
      }
      
      // Crash: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–ï–ó –ó–ê–î–ï–†–ñ–ö–ò
      if (game === 'crash') {
        if (!gameState.isInitialized) {
          // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å—Ä–∞–∑—É —Å—Ç–∞—Ä—Ç—É–µ–º
          gameState.isInitialized = true;
          console.log('üöÄ Crash: –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
          startCrashWaiting();
        } else if (gameState.status === 'waiting' && gameState.waitingTimer) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –°–†–ê–ó–£
          socket.emit('crash_waiting', {
            timeLeft: gameState.waitingTime
          });
          console.log(`‚ö° Crash: –¢–∞–π–º–µ—Ä ${gameState.waitingTime}`);
        } else if (gameState.status === 'flying' && gameState.gameInterval) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –°–†–ê–ó–£
          socket.emit('crash_started', {
            startTime: gameState.startTime.toISOString()
          });
          socket.emit('crash_multiplier', {
            multiplier: parseFloat(gameState.multiplier.toFixed(2))
          });
          console.log(`‚ö° Crash: –ú–Ω–æ–∂–∏—Ç–µ–ª—å ${gameState.multiplier.toFixed(2)}x`);
        }
      }
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  socket.on('get_game_state', ({ game }) => {
    const gameState = globalGames[game];
    if (!gameState) {
      console.error(`‚ùå –ò–≥—Ä–∞ ${game} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ globalGames`);
      return;
    }
    
    // –î–ª—è blackjack –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (game === 'blackjack') {
      socket.emit('game_state_sync', {
        game: 'blackjack',
        status: gameState.status,
        players: gameState.players.map(p => ({
          userId: p.userId,
          nickname: p.nickname,
          photoUrl: p.photoUrl,
          lastSeen: p.lastSeen
        })),
        history: gameState.history
      });
      return;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä (roll, crash –∏ —Ç.–¥.)
    const cleanState = {
      game: game,
      status: gameState.status,
      players: gameState.players.map(p => ({
        userId: p.userId,
        nickname: p.nickname,
        photoUrl: p.photoUrl,
        bet: p.bet,
        color: p.color, // –î–û–ë–ê–í–õ–Ø–ï–ú –¶–í–ï–¢
        isBot: p.isBot || String(p.userId).startsWith('bot_') // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –±–æ—Ç–∞
      })),
      timer: gameState.timer,
      startTime: gameState.startTime ? gameState.startTime.toISOString() : null
    };
    socket.emit('game_state_sync', cleanState);
  });

  // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
  socket.on('place_bet', async ({ game, userId, nickname, photoUrl, bet }) => {
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞:`, { game, userId, nickname, bet });
    
    const gameState = globalGames[game];
    
    if (!gameState) {
      console.error(`‚ùå –ò–≥—Ä–∞ ${game} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const existingPlayer = gameState.players.find(p => p.userId === userId);
    const playerColor = getPlayerColor(userId); // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–≤–µ—Ç
    
    if (existingPlayer) {
      existingPlayer.bet += bet;
      console.log(`‚ûï –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ ${nickname}: ${existingPlayer.bet}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
      const cleanPlayer = {
        userId: userId,
        nickname: nickname,
        photoUrl: photoUrl || null,
        bet: bet,
        color: playerColor // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç
      };
      gameState.players.push(cleanPlayer);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ ${nickname} —Å–æ —Å—Ç–∞–≤–∫–æ–π ${bet}, —Ü–≤–µ—Ç: ${playerColor}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ + —Ü–≤–µ—Ç)
    io.to(`global_${game}`).emit('player_bet', { 
      userId: userId, 
      nickname: nickname, 
      photoUrl: photoUrl || null, 
      bet: bet,
      color: playerColor // –¶–≤–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö
    });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ global_${game}, –∏–≥—Ä–æ–∫–æ–≤: ${gameState.players.length}`);

    // –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä—ã
    if (game === 'roll') {
      // Roll: –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞
      if (gameState.status === 'waiting' && gameState.players.length >= 2) {
        console.log(`üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º Roll`);
        startGlobalGame(game);
      } else if (gameState.status === 'waiting' && gameState.players.length === 1) {
        console.log(`‚è≥ Roll: –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...`);
      }
    } else if (game === 'crash') {
      // Crash: –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤—Å–µ–≥–¥–∞ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞–≤–æ–∫)
      // –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤ crashCrashGame()
    }
  });

  // –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã
  function startGlobalGame(game) {
    const gameState = globalGames[game];
    gameState.status = 'betting';
    gameState.startTime = new Date();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    io.to(`global_${game}`).emit('game_started', {
      startTime: gameState.startTime.toISOString(), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Date –≤ —Å—Ç—Ä–æ–∫—É
      timer: gameState.timer
    });

    console.log(`üéÆ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ ${game} –Ω–∞—á–∞–ª–∞—Å—å! –¢–∞–π–º–µ—Ä: ${gameState.timer}—Å`);

    // –¢–∞–π–º–µ—Ä
    gameState.timerInterval = setTimeout(() => {
      spinGlobalGame(game);
    }, gameState.timer * 1000);
  }

  // –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ
  function spinGlobalGame(game) {
    const gameState = globalGames[game];
    
    console.log(`üé∞ spinGlobalGame –≤—ã–∑–≤–∞–Ω –¥–ª—è ${game}, –∏–≥—Ä–æ–∫–æ–≤: ${gameState.players.length}`);
    
    if (gameState.players.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, —Å–±—Ä–æ—Å –∏–≥—Ä—ã`);
      gameState.status = 'waiting';
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ –±–æ—Ç–æ–≤
    stopBotBets();

    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –≤–µ—Å–∞–º (–±–æ—Ç—ã –∏–º–µ—é—Ç +30% —à–∞–Ω—Å)
    const totalBets = gameState.players.reduce((sum, p) => sum + p.bet, 0);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ (–±–æ—Ç—ã +30%)
    const weightedBets = gameState.players.map(p => {
      const isBot = p.isBot || String(p.userId).startsWith('bot_');
      const weight = isBot ? p.bet * 1.3 : p.bet; // +30% –¥–ª—è –±–æ—Ç–æ–≤
      return { player: p, weight };
    });
    
    const totalWeight = weightedBets.reduce((sum, w) => sum + w.weight, 0);
    const random = Math.random() * totalWeight;
    let sum = 0;
    let winner = gameState.players[0];

    for (const weighted of weightedBets) {
      sum += weighted.weight;
      if (random <= sum) {
        winner = weighted.player;
        break;
      }
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ (–æ–Ω–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∏–≥—Ä–µ)
    gameState.players.forEach(player => {
      if (player.isBot || String(player.userId).startsWith('bot_')) {
        const botData = activeBotsData.get(player.userId);
        if (botData) {
          botData.gamesPlayed++;
          const isWinner = player.userId === winner.userId;
          console.log(`ü§ñ –ë–æ—Ç ${player.nickname} ${isWinner ? '–≤—ã–∏–≥—Ä–∞–ª' : '—É—á–∞—Å—Ç–≤–æ–≤–∞–ª'} (–∏–≥—Ä: ${botData.gamesPlayed}/2)`);
        }
      }
    });

    console.log(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ ${game}: ${winner.nickname} (userId: ${winner.userId}, –±–æ—Ç: ${winner.isBot || String(winner.userId).startsWith('bot_')})`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    gameState.status = 'spinning';
    gameState.winner = winner.userId;

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const totalAmount = gameState.players.reduce((sum, p) => sum + p.bet, 0);

    io.to(`global_${game}`).emit('spin_wheel', { winner: winner.userId, amount: totalAmount });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ spin_wheel –≤ –∫–æ–º–Ω–∞—Ç—É global_${game} —Å winnerId: ${winner.userId}`);
    console.log(`üìä –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ global_${game}:`, io.sockets.adapter.rooms.get(`global_${game}`)?.size || 0);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      io.to(`global_${game}`).emit('game_finished', { winner: winner.userId });
      
      // –û—á–∏—â–∞–µ–º –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 2 –∏–≥—Ä
      cleanupBots();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      gameState.status = 'waiting';
      gameState.players = [];
      gameState.startTime = null;
      
      // –û—á–∏—â–∞–µ–º –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 2 –∏–≥—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã—Ö
      setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –≤ waiting (–º–æ–≥–ª–∞ –Ω–∞—á–∞—Ç—å—Å—è –Ω–æ–≤–∞—è)
        if (gameState.status !== 'waiting') {
          console.log(`‚è∏Ô∏è –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤`);
          return;
        }
        
        cleanupBots(); // –û—á–∏—â–∞–µ–º –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 2 –∏–≥—Ä
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        const currentBotCount = gameState.activeBots.length;
        const targetBotCount = 2 + Math.floor(Math.random() * 3); // 2-4 –±–æ—Ç–∞
        
        // –ï—Å–ª–∏ –±–æ—Ç–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤ waiting)
        if (gameState.status === 'waiting' && currentBotCount < targetBotCount) {
          const botsToAdd = targetBotCount - currentBotCount;
          console.log(`ü§ñ –ü–æ—Å–ª–µ –∏–≥—Ä—ã: –¥–æ–±–∞–≤–ª—è–µ–º ${botsToAdd} –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤ (—Ç–µ–∫—É—â–µ–µ: ${currentBotCount})`);
          addBotsToRoll(botsToAdd);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤ waiting)
        if (gameState.status === 'waiting' && gameState.activeBots.length > 0) {
          startBotBets();
        }
      }, 2000);
      
      console.log(`üèÅ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ ${game} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    }, 5000);
  }

  // ============ ROLL BOTS FUNCTIONS (–≤–Ω—É—Ç—Ä–∏ io.on –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ startGlobalGame) ============
  // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –æ—Ç –±–æ—Ç–∞
  function makeBotBet(botId) {
    const gameState = globalGames.roll;
    const botData = activeBotsData.get(botId);
    if (!botData) return;
    
    const bot = ROLL_BOTS.find(b => b.id === botId);
    if (!bot) return;
    
    // –ù–µ –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫–∏ –≤–æ –≤—Ä–µ–º—è spinning
    if (gameState.status === 'spinning') {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞–≤–∫—É –æ—Ç 100 –¥–æ 2000
    const betAmount = Math.floor(Math.random() * (BOT_BET_MAX - BOT_BET_MIN + 1)) + BOT_BET_MIN;
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ place_bet
    const botColor = getPlayerColor(botId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    const existingPlayer = gameState.players.find(p => p.userId === botId);
    if (existingPlayer) {
      existingPlayer.bet += betAmount;
    } else {
      const cleanPlayer = {
        userId: botId,
        nickname: bot.nickname,
        photoUrl: bot.photoUrl,
        bet: betAmount,
        color: botColor,
        isBot: true // –ú–∞—Ä–∫–µ—Ä –±–æ—Ç–∞
      };
      gameState.players.push(cleanPlayer);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    io.to('global_roll').emit('player_bet', {
      userId: botId,
      nickname: bot.nickname,
      photoUrl: bot.photoUrl,
      bet: betAmount,
      color: botColor,
      isBot: true // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –±–æ—Ç–∞
    });
    
    console.log(`ü§ñ –ë–æ—Ç ${bot.nickname} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É ${betAmount}‚ÇΩ`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (gameState.status === 'waiting' && gameState.players.length >= 2) {
      startGlobalGame('roll');
    }
    
    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤ waiting –∏–ª–∏ betting)
    // –ù–ï –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ —Å—ã–≥—Ä–∞–ª 2 –∏–≥—Ä—ã
    if (botData.gamesPlayed >= 2) {
      console.log(`ü§ñ –ë–æ—Ç ${bot.nickname} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∏–≥—Ä (2), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏`);
      return; // –ë–æ—Ç —É–∂–µ —Å—ã–≥—Ä–∞–ª –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä
    }
    
    if (gameState.status === 'waiting' || gameState.status === 'betting') {
      botData.betTimer = setTimeout(() => {
        makeBotBet(botId);
      }, BOT_BET_INTERVAL);
    }
  }

  // –ó–∞–ø—É—Å–∫ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –±–æ—Ç–æ–≤
  function startBotBets() {
    const gameState = globalGames.roll;
    
    // –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –±–æ—Ç–æ–≤: 1, 3, 6, 9, 12 —Å–µ–∫—É–Ω–¥ –∏ —Ç.–¥.
    const botDelays = [1000, 3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000];
    let delayIndex = 0;
    
    gameState.activeBots.forEach(bot => {
      const botData = activeBotsData.get(bot.id);
      if (!botData) return;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—ã–≥—Ä–∞–ª–∏ 2 –∏–≥—Ä—ã
      if (botData.gamesPlayed >= 2) {
        return;
      }
      
      // –ü–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ (1—Å, 3—Å, 6—Å –∏ —Ç.–¥.)
      const delay = botDelays[delayIndex % botDelays.length];
      delayIndex++;
      
      setTimeout(() => {
        makeBotBet(bot.id);
      }, delay);
    });
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –±–æ—Ç–æ–≤
  function stopBotBets() {
    activeBotsData.forEach(botData => {
      if (botData.betTimer) {
        clearTimeout(botData.betTimer);
        botData.betTimer = null;
      }
    });
  }

  // –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 2 –∏–≥—Ä
  function cleanupBots() {
    const gameState = globalGames.roll;
    
    gameState.activeBots = gameState.activeBots.filter(bot => {
      const botData = activeBotsData.get(bot.id);
      if (botData && botData.gamesPlayed >= 2) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        activeBotsData.delete(bot.id);
        console.log(`ü§ñ –ë–æ—Ç ${bot.nickname} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ ${botData.gamesPlayed} –∏–≥—Ä`);
        return false;
      }
      return true;
    });
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ scheduleBotSpawn
  botFunctions = {
    startBotBets,
    stopBotBets,
    cleanupBots,
    makeBotBet
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–≤–Ω –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  if (!scheduleBotSpawn.initialized) {
    scheduleBotSpawn.initialized = true;
    scheduleBotSpawn();
    
    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      const initialBots = 2 + Math.floor(Math.random() * 3); // 2-4 –±–æ—Ç–∞
      console.log(`ü§ñ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${initialBots} –±–æ—Ç–æ–≤ –≤ Roll...`);
      addBotsToRoll(initialBots);
      
      setTimeout(() => {
        if (botFunctions) {
          botFunctions.startBotBets();
        }
      }, 2000);
    }, 2000);
    
    // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É (—á—Ç–æ–±—ã –±–æ—Ç—ã –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –±—ã—Å—Ç—Ä–µ–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)
    setTimeout(() => {
      if (!botFunctions) return;
      const gameState = globalGames.roll;
      
      // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
      if (gameState.status !== 'waiting') {
        console.log(`‚è∏Ô∏è –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${gameState.status})`);
        return;
      }
      
      botFunctions.cleanupBots();
      
      const currentBotCount = gameState.activeBots.length;
      const targetBotCount = 2 + Math.floor(Math.random() * 3);
      
      if (currentBotCount < targetBotCount) {
        const botsToAdd = targetBotCount - currentBotCount;
        console.log(`ü§ñ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º ${botsToAdd} –±–æ—Ç–æ–≤`);
        addBotsToRoll(botsToAdd);
        
        setTimeout(() => {
          if (botFunctions && gameState.status === 'waiting') {
            botFunctions.startBotBets();
          }
        }, 1000);
      }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
  }

  // ============ CRASH GAME ============
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ crash point (—á–∞—â–µ –Ω–∏–∑–∫–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏)
  function generateWeightedCrashPoint() {
    const rand = Math.random();
    
    // 75% - –Ω–∏–∑–∫–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (1.15, 1.22, 1.32, 1.45, 1.56)
    if (rand < 0.75) {
      const lowMultipliers = [1.15, 1.22, 1.32, 1.45, 1.56];
      const randomLow = lowMultipliers[Math.floor(Math.random() * lowMultipliers.length)];
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å ¬±0.05
      return randomLow + (Math.random() - 0.5) * 0.1;
    }
    // 20% - —Å—Ä–µ–¥–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (1.6-2.0)
    else if (rand < 0.95) {
      return 1.6 + Math.random() * 0.4;
    }
    // 5% - –≤—ã—Å–æ–∫–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (>2.0, –¥–æ 3.5)
    else {
      return 2.0 + Math.random() * 1.5;
    }
  }
  
  // –ó–∞–ø—É—Å–∫ Crash (—Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è)
  function startCrashWaiting() {
    const gameState = globalGames.crash;
    gameState.status = 'waiting';
    gameState.waitingTime = 5;
    
    console.log('‚è≥ Crash: –¢–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è 5 —Å–µ–∫—É–Ω–¥...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
    if (gameState.waitingTimer) {
      clearInterval(gameState.waitingTimer);
      gameState.waitingTimer = null;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    io.to('global_crash').emit('crash_waiting', {
      timeLeft: 5
    });
    
    // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    gameState.waitingTimer = setInterval(() => {
      gameState.waitingTime--;
      
      io.to('global_crash').emit('crash_waiting', {
        timeLeft: gameState.waitingTime
      });
      
      if (gameState.waitingTime <= 0) {
        clearInterval(gameState.waitingTimer);
        gameState.waitingTimer = null;
        startCrashGame();
      }
    }, 1000);
  }
  
  // –ó–∞–ø—É—Å–∫ Crash –∏–≥—Ä—ã
  function startCrashGame() {
    const gameState = globalGames.crash;
    gameState.status = 'flying';
    gameState.startTime = new Date();
    gameState.multiplier = 1.00;
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è crash point —Å —É–∫–ª–æ–Ω–æ–º –≤ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    // 75% - –Ω–∏–∑–∫–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (1.15-1.6), 20% - —Å—Ä–µ–¥–Ω–∏–µ (1.6-2.0), 5% - –≤—ã—Å–æ–∫–∏–µ (>2.0)
    gameState.crashPoint = generateWeightedCrashPoint().toFixed(2);
    
    io.to('global_crash').emit('crash_started', {
      startTime: gameState.startTime.toISOString()
    });
    
    console.log(`üöÄ Crash –Ω–∞—á–∞–ª—Å—è! –ö—Ä–∞—à –Ω–∞: ${gameState.crashPoint}x`);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–∞–∂–¥—ã–µ 100–º—Å (—É—Å–∫–æ—Ä—è–µ—Ç—Å—è —Å —Ä–æ—Å—Ç–æ–º)
    gameState.gameInterval = setInterval(() => {
      // –£—Å–∫–æ—Ä—è–µ–º —Ä–æ—Å—Ç –ø–æ –º–µ—Ä–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
      let increment = 0.01;
      if (gameState.multiplier > 2) increment = 0.02;
      if (gameState.multiplier > 5) increment = 0.05;
      if (gameState.multiplier > 10) increment = 0.1;
      
      gameState.multiplier += increment;
      
      io.to('global_crash').emit('crash_multiplier', {
        multiplier: parseFloat(gameState.multiplier.toFixed(2))
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
      if (gameState.multiplier >= parseFloat(gameState.crashPoint)) {
        crashCrashGame();
      }
    }, 100);
  }
  
  // –ö—Ä–∞—à
  function crashCrashGame() {
    const gameState = globalGames.crash;
    
    if (gameState.gameInterval) {
      clearInterval(gameState.gameInterval);
    }
    
    gameState.status = 'crashed';
    
    io.to('global_crash').emit('crash_ended', {
      crashPoint: parseFloat(gameState.crashPoint)
    });
    
    console.log(`üí• Crash —É–ø–∞–ª –Ω–∞: ${gameState.crashPoint}x`);
    
    // –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      gameState.players = [];
      gameState.multiplier = 1.00;
      gameState.status = 'waiting';
      
      io.to('global_crash').emit('game_state_sync', {
        status: 'waiting',
        players: [],
        multiplier: 1.00,
        crashPoint: null
      });
      
      console.log('üîÑ Crash —Å–±—Ä–æ—à–µ–Ω');
      
      // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –í–°–ï–ì–î–ê (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–≥—Ä–æ–∫–æ–≤)
      setTimeout(() => {
        startCrashWaiting();
      }, 1000);
    }, 3000);
  }
  
  // Cashout
  socket.on('crash_cashout', ({ game, userId }) => {
    const gameState = globalGames.crash;
    
    if (gameState.status !== 'flying') return;
    
    const player = gameState.players.find(p => p.userId === userId);
    if (!player || player.cashout) return;
    
    const cashout = Math.floor(player.bet * gameState.multiplier);
    player.cashout = cashout;
    player.multiplier = gameState.multiplier;
    
    io.to('global_crash').emit('player_cashout', {
      userId: userId,
      cashout: cashout,
      multiplier: gameState.multiplier
    });
    
    console.log(`üíµ ${player.nickname} –∑–∞–±—Ä–∞–ª ${cashout} –Ω–∞ ${gameState.multiplier.toFixed(2)}x`);
  });

  // ============ SPEEDCASH –õ–û–ì–ò–ö–ê ============
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SpeedCASH
  socket.on('join_speedcash', () => {
    socket.join('global_speedcash');
    console.log(`üöó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SpeedCASH`);
    
    const gameState = globalGames.speedcash;
    
    if (!gameState.isInitialized) {
      gameState.isInitialized = true;
      startSpeedCashBetting();
    }
  });
  
  // –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  socket.on('get_speedcash_state', () => {
    const gameState = globalGames.speedcash;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º elapsed –≤—Ä–µ–º—è –¥–ª—è racing
    let elapsed = 0;
    if (gameState.status === 'racing' && gameState.raceStartTime) {
      elapsed = Date.now() - gameState.raceStartTime;
    }
    
    socket.emit('speedcash_current_state', {
      status: gameState.status,
      timeLeft: gameState.bettingTime,
      blueMultiplier: gameState.blueMultiplier,
      orangeMultiplier: gameState.orangeMultiplier,
      blueTarget: gameState.blueStopMultiplier,
      orangeTarget: gameState.orangeStopMultiplier,
      delayedCar: gameState.delayedCar,
      elapsed: elapsed
    });
    
    console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${gameState.status}, elapsed: ${elapsed}ms`);
  });
  
  // –ó–∞–ø—É—Å–∫ —Ñ–∞–∑—ã —Å—Ç–∞–≤–æ–∫
  function startSpeedCashBetting() {
    const gameState = globalGames.speedcash;
    gameState.status = 'betting';
    gameState.bettingTime = 5;
    gameState.blueMultiplier = 1.00;
    gameState.orangeMultiplier = 1.00;
    gameState.winner = null;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–Ω–∫–∏ (5-15 —Å–µ–∫—É–Ω–¥)
    gameState.raceDuration = 5000 + Math.random() * 10000; // 5-15 —Å–µ–∫—É–Ω–¥
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—É—é –º–∞—à–∏–Ω—É (–í–°–ï–ì–î–ê —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–µ—Ä–∂–∞–Ω–∞)
    const rand = Math.random();
    if (rand < 0.015) {
      // 1.5% - –æ–±–µ –∑–∞–¥–µ—Ä–∂–∞–Ω—ã
      gameState.delayedCar = 'both';
    } else if (rand < 0.5) {
      // 48.5% - blue –∑–∞–¥–µ—Ä–∂–∞–Ω–∞, orange —É–µ–∑–∂–∞–µ—Ç
      gameState.delayedCar = 'blue';
    } else {
      // 50% - orange –∑–∞–¥–µ—Ä–∂–∞–Ω–∞, blue —É–µ–∑–∂–∞–µ—Ç
      gameState.delayedCar = 'orange';
    }
    
    console.log(`üöó SpeedCASH: Betting started. Race duration: ${(gameState.raceDuration/1000).toFixed(1)}s, Delayed: ${gameState.delayedCar}`);
    
    io.to('global_speedcash').emit('speedcash_betting_start', {
      bettingTime: 5,
      delayedCar: gameState.delayedCar
    });
    
    // –¢–∞–π–º–µ—Ä —Å—Ç–∞–≤–æ–∫
    if (gameState.bettingTimer) clearInterval(gameState.bettingTimer);
    
    gameState.bettingTimer = setInterval(() => {
      gameState.bettingTime--;
      
      io.to('global_speedcash').emit('speedcash_betting_timer', {
        timeLeft: gameState.bettingTime
      });
      
      if (gameState.bettingTime <= 0) {
        clearInterval(gameState.bettingTimer);
        startSpeedCashRace();
      }
    }, 1000);
  }
  
  // –ó–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏
  function startSpeedCashRace() {
    const gameState = globalGames.speedcash;
    gameState.status = 'racing';
    gameState.raceStartTime = Date.now();
    
    io.to('global_speedcash').emit('speedcash_race_start', {
      delayedCar: gameState.delayedCar
    });
    
    console.log(`üèÅ SpeedCASH: Race started! Duration: ${(gameState.raceDuration/1000).toFixed(1)}s`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –∫–∞–∂–¥—ã–µ 100–º—Å (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
    if (gameState.raceInterval) clearInterval(gameState.raceInterval);
    
    gameState.raceInterval = setInterval(() => {
      const elapsed = Date.now() - gameState.raceStartTime;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
      if (elapsed >= gameState.raceDuration && !gameState.raceEnding) {
        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º race_end, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–æ—Å—Ç 2 —Å–µ–∫—É–Ω–¥—ã
        gameState.raceEnding = true;
        
        let blueEscaped = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–µ—Ä–∂–∞–Ω—ã
        let orangeEscaped = false;
        
        if (gameState.delayedCar === 'blue') {
          blueEscaped = false; // Blue –∑–∞–¥–µ—Ä–∂–∞–Ω–∞
          orangeEscaped = true; // Orange —É–µ–∑–∂–∞–µ—Ç
        } else if (gameState.delayedCar === 'orange') {
          blueEscaped = true; // Blue —É–µ–∑–∂–∞–µ—Ç
          orangeEscaped = false; // Orange –∑–∞–¥–µ—Ä–∂–∞–Ω–∞
        } else if (gameState.delayedCar === 'both') {
          blueEscaped = false; // –û–±–µ –∑–∞–¥–µ—Ä–∂–∞–Ω—ã
          orangeEscaped = false;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º race_end —Å—Ä–∞–∑—É
        io.to('global_speedcash').emit('speedcash_race_end', {
          winner: blueEscaped && !orangeEscaped ? 'blue' : (!blueEscaped && orangeEscaped ? 'orange' : (blueEscaped && orangeEscaped ? 'both' : 'none')),
          blueMultiplier: parseFloat(gameState.blueMultiplier.toFixed(2)),
          orangeMultiplier: parseFloat(gameState.orangeMultiplier.toFixed(2)),
          blueEscaped,
          orangeEscaped
        });
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–æ—Å—Ç –µ—â–µ 2 —Å–µ–∫—É–Ω–¥—ã, –ø–æ—Ç–æ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º
        setTimeout(() => {
          if (gameState.raceInterval) {
            clearInterval(gameState.raceInterval);
            gameState.raceInterval = null;
          }
          gameState.status = 'finished';
          gameState.raceEnding = false;
          
          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            startSpeedCashBetting();
          }, 3000);
        }, 2000);
      }
      
      // –û–ë–ï –º–∞—à–∏–Ω—ã —Ä–∞—Å—Ç—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –ù–û –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–Ω–∫–∏ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è
      const elapsedSeconds = elapsed / 1000;
      const baseIncrement = 0.01;
      const timeMultiplier = 1 + (elapsedSeconds / 10); // –£—Å–∫–æ—Ä–µ–Ω–∏–µ
      
      // Blue —Ä–∞—Å—Ç–µ—Ç –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–µ—Ä–∂–∞–Ω–∞ –ò–õ–ò –≥–æ–Ω–∫–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
      const blueIncrement = baseIncrement * timeMultiplier;
      const blueDetained = gameState.raceEnding && gameState.delayedCar === 'blue' || gameState.delayedCar === 'both';
      if (!blueDetained) {
        gameState.blueMultiplier += blueIncrement;
      }
      
      // Orange —Ä–∞—Å—Ç–µ—Ç –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–µ—Ä–∂–∞–Ω–∞ –ò–õ–ò –≥–æ–Ω–∫–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
      const orangeIncrement = baseIncrement * timeMultiplier;
      const orangeDetained = gameState.raceEnding && gameState.delayedCar === 'orange' || gameState.delayedCar === 'both';
      if (!orangeDetained) {
        gameState.orangeMultiplier += orangeIncrement;
      }
      
      io.to('global_speedcash').emit('speedcash_multiplier_update', {
        blueMultiplier: parseFloat(gameState.blueMultiplier.toFixed(2)),
        orangeMultiplier: parseFloat(gameState.orangeMultiplier.toFixed(2))
      });
    }, 100); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 100ms –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
  }

  // ============ BLACKJACK ============
  
  // –ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª –≤ blackjack
  socket.on('join_game_session', ({ game, userId, nickname, photoUrl }) => {
    if (game !== 'blackjack') return;
    
    const gameState = globalGames.blackjack;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏–≥—Ä–æ–∫
    const existingPlayer = gameState.players.find(p => p.userId === userId);
    if (!existingPlayer) {
      gameState.players.push({
        userId,
        nickname,
        photoUrl,
        lastSeen: Date.now()
      });
      console.log(`üë§ BlackJack: –ò–≥—Ä–æ–∫ ${nickname} –∑–∞—à–µ–ª –≤ –∏–≥—Ä—É`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
      io.to('global_blackjack').emit('player_joined_game', {
        game: 'blackjack',
        userId,
        nickname,
        photoUrl
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º lastSeen
      existingPlayer.lastSeen = Date.now();
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    socket.emit('game_state_sync', {
      game: 'blackjack',
      status: gameState.status,
      players: gameState.players.map(p => ({
        userId: p.userId,
        nickname: p.nickname,
        photoUrl: p.photoUrl,
        lastSeen: p.lastSeen
      })),
      history: gameState.history
    });
  });
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã blackjack
  socket.on('blackjack_result', ({ game, userId, nickname, photoUrl, bet, win, isWinner, multiplier }) => {
    if (game !== 'blackjack') return;
    
    const gameState = globalGames.blackjack;
    
    console.log(`üÉè BlackJack —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, { nickname, bet, win, isWinner, multiplier });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    gameState.history.unshift({
      userId,
      nickname,
      photoUrl,
      bet,
      win,
      isWinner,
      multiplier,
      timestamp: Date.now()
    });
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–≥—Ä
    if (gameState.history.length > 20) {
      gameState.history = gameState.history.slice(0, 20);
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
    io.to('global_blackjack').emit('blackjack_game_finished', {
      userId,
      nickname,
      photoUrl,
      bet,
      win,
      isWinner,
      multiplier
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    io.to('global_blackjack').emit('game_state_sync', {
      game: 'blackjack',
      status: gameState.status,
      players: gameState.players,
      history: gameState.history
    });
  });
  
  // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ blackjack (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
  setInterval(() => {
    const gameState = globalGames.blackjack;
    const now = Date.now();
    const fiveMinutes = 5 * 60 * 1000;
    
    const beforeCount = gameState.players.length;
    gameState.players = gameState.players.filter(p => {
      return (now - p.lastSeen) < fiveMinutes;
    });
    
    if (gameState.players.length !== beforeCount) {
      console.log(`üßπ BlackJack: –û—á–∏—â–µ–Ω–æ ${beforeCount - gameState.players.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤`);
    }
  }, 30000);
  
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    const user = onlineUsers.get(socket.id);
    
    if (user) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
      activeRooms.forEach((room, roomId) => {
        const playerIndex = room.players.findIndex(p => p.socketId === socket.id);
        if (playerIndex !== -1) {
          room.players.splice(playerIndex, 1);
          
          if (room.players.length === 0) {
            activeRooms.delete(roomId);
            io.emit('room_removed', roomId);
          } else {
            io.to(roomId).emit('player_left', {
              userId: user.userId,
              room: room
            });
          }
        }
      });

      onlineUsers.delete(socket.id);
      userSockets.delete(user.userId);
      
      io.emit('online_users', Array.from(onlineUsers.values()));
      console.log(`‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${user.nickname} (${socket.id})`);
    }
  });
});

// ============ HELPER FUNCTIONS ============

function validateMove(game, gameState, move, userId) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  return true;
}

function updateGameState(game, gameState, move, userId, gameData) {
  // TODO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  if (!gameState.moves) gameState.moves = [];
  gameState.moves.push({ userId, move, timestamp: new Date(), ...gameData });
  return gameState;
}

function checkGameEnd(game, gameState) {
  // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  return { isFinished: false, winner: null, results: {} };
}

async function saveGameHistory(room, gameResult) {
  try {
    const historyEntry = {
      roomId: room.id,
      game: room.game,
      players: room.players.map(p => ({
        userId: p.userId,
        nickname: p.nickname,
        bet: gameResult.bets?.[p.userId] || 0,
        winnings: gameResult.winnings?.[p.userId] || 0,
        isWinner: gameResult.winner === p.userId
      })),
      winner: gameResult.winner,
      gameState: room.gameState,
      duration: Date.now() - room.createdAt.getTime(),
      createdAt: new Date()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (GameHistory) {
      const history = new GameHistory(historyEntry);
      await history.save();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB');
    } else {
      // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
      let historyData = [];
      if (fs.existsSync(HISTORY_FILE)) {
        historyData = JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf8'));
      }
      historyData.push(historyEntry);
      
      // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
      if (historyData.length > 1000) {
        historyData = historyData.slice(-1000);
      }
      
      fs.writeFileSync(HISTORY_FILE, JSON.stringify(historyData, null, 2));
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ JSON —Ñ–∞–π–ª');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
}

// ============ REST API ============

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'index.html'));
});

app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date() });
});

app.get('/api/stats', async (req, res) => {
  try {
    let totalUsers = 0;
    let totalGames = 0;

    if (User && GameHistory) {
      totalUsers = await User.countDocuments();
      totalGames = await GameHistory.countDocuments();
    } else {
      // –ß–∏—Ç–∞–µ–º –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
      if (fs.existsSync(HISTORY_FILE)) {
        const historyData = JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf8'));
        totalGames = historyData.length;
      }
    }
    
    res.json({
      totalUsers,
      totalGames,
      onlineUsers: onlineUsers.size,
      activeRooms: activeRooms.size,
      usingMongoDB: !!User
    });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/api/history', (req, res) => {
  try {
    let historyData = [];
    
    if (fs.existsSync(HISTORY_FILE)) {
      historyData = JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf8'));
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–≥—Ä
    res.json(historyData.slice(-50).reverse());
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// ============================================
// BALANCE API - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
// ============================================

const BALANCES_FILE = path.join(DATA_DIR, 'balances.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (!fs.existsSync(BALANCES_FILE)) {
  fs.writeFileSync(BALANCES_FILE, JSON.stringify({}, null, 2));
}

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/balance/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    if (User) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB
      let user = await User.findOne({ telegramId });
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        user = await User.create({
          telegramId,
          nickname: `User${telegramId.slice(-4)}`,
          balance: {
            rubles: 1000,
            chips: 1000
          }
        });
      }
      res.json({
        rubles: user.balance.coins || 1000, // coins –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ rubles
        chips: user.balance.chips || 1000
      });
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON —Ñ–∞–π–ª
      const balances = JSON.parse(fs.readFileSync(BALANCES_FILE, 'utf8'));
      const userBalance = balances[telegramId] || { rubles: 1000, chips: 1000 };
      res.json(userBalance);
    }
  } catch (error) {
    console.error('‚ùå Error getting balance:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/balance/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    const { rubles, chips } = req.body;
    
    if (User) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB
      let user = await User.findOne({ telegramId });
      if (!user) {
        user = await User.create({
          telegramId,
          nickname: `User${telegramId.slice(-4)}`,
          balance: {
            coins: parseFloat(rubles) || 1000,
            chips: parseInt(chips) || 1000
          }
        });
      } else {
        user.balance.coins = parseFloat(rubles) || user.balance.coins;
        user.balance.chips = parseInt(chips) || user.balance.chips;
        await user.save();
      }
      
      res.json({
        rubles: user.balance.coins,
        chips: user.balance.chips
      });
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON —Ñ–∞–π–ª
      const balances = JSON.parse(fs.readFileSync(BALANCES_FILE, 'utf8'));
      balances[telegramId] = {
        rubles: parseFloat(rubles) || 1000,
        chips: parseInt(chips) || 1000
      };
      fs.writeFileSync(BALANCES_FILE, JSON.stringify(balances, null, 2));
      res.json(balances[telegramId]);
    }
    
    console.log(`üí∞ Balance updated for ${telegramId}: ${rubles}‚ÇΩ, ${chips} chips`);
  } catch (error) {
    console.error('‚ùå Error updating balance:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫ –±–∞–ª–∞–Ω—Å—É (–¥–ª—è –∞–¥–º–∏–Ω–∞/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.post('/api/balance/:telegramId/add', async (req, res) => {
  try {
    const { telegramId } = req.params;
    const { rubles, chips } = req.body;
    
    if (User) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB
      let user = await User.findOne({ telegramId });
      if (!user) {
        user = await User.create({
          telegramId,
          nickname: `User${telegramId.slice(-4)}`,
          balance: {
            coins: parseFloat(rubles) || 0,
            chips: parseInt(chips) || 0
          }
        });
      } else {
        user.balance.coins = (user.balance.coins || 0) + (parseFloat(rubles) || 0);
        user.balance.chips = (user.balance.chips || 0) + (parseInt(chips) || 0);
        await user.save();
      }
      
      res.json({
        rubles: user.balance.coins,
        chips: user.balance.chips
      });
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON —Ñ–∞–π–ª
      const balances = JSON.parse(fs.readFileSync(BALANCES_FILE, 'utf8'));
      const currentBalance = balances[telegramId] || { rubles: 0, chips: 0 };
      balances[telegramId] = {
        rubles: currentBalance.rubles + (parseFloat(rubles) || 0),
        chips: currentBalance.chips + (parseInt(chips) || 0)
      };
      fs.writeFileSync(BALANCES_FILE, JSON.stringify(balances, null, 2));
      res.json(balances[telegramId]);
    }
    
    console.log(`‚ûï Balance added for ${telegramId}: +${rubles}‚ÇΩ, +${chips} chips`);
  } catch (error) {
    console.error('‚ùå Error adding balance:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/admin/balances', async (req, res) => {
  try {
    if (User) {
      const users = await User.find({}, 'telegramId nickname balance').limit(100);
      res.json(users.map(u => ({
        telegramId: u.telegramId,
        nickname: u.nickname,
        rubles: u.balance.coins || 0,
        chips: u.balance.chips || 0
      })));
    } else {
      const balances = JSON.parse(fs.readFileSync(BALANCES_FILE, 'utf8'));
      res.json(Object.entries(balances).map(([telegramId, balance]) => ({
        telegramId,
        rubles: balance.rubles,
        chips: balance.chips
      })));
    }
  } catch (error) {
    console.error('‚ùå Error getting balances:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// ============ ROLL BOTS AUTO-SPAWN ============
// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–æ–≤ –∏–∑ io.on
let botFunctions = null;

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ (2-4 –±–æ—Ç–∞)
function scheduleBotSpawn() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  const botCheckInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  
  setInterval(() => {
    if (!botFunctions) return; // –§—É–Ω–∫—Ü–∏–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    
    const gameState = globalGames.roll;
    
    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    if (gameState.status !== 'waiting') {
      console.log(`‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤ (—Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: ${gameState.status})`);
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –±–æ—Ç–æ–≤ (–ø–æ—Å–ª–µ 2 –∏–≥—Ä)
    botFunctions.cleanupBots();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
    const currentBotCount = gameState.activeBots.length;
    const targetBotCount = 2 + Math.floor(Math.random() * 3); // 2-4 –±–æ—Ç–∞
    
    // –ï—Å–ª–∏ –±–æ—Ç–æ–≤ –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö
    if (currentBotCount < targetBotCount) {
      const botsToAdd = targetBotCount - currentBotCount;
      console.log(`ü§ñ –î–æ–±–∞–≤–ª—è–µ–º ${botsToAdd} –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤ (—Ç–µ–∫—É—â–µ–µ: ${currentBotCount}, —Ü–µ–ª–µ–≤–æ–µ: ${targetBotCount})`);
      addBotsToRoll(botsToAdd);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤
      setTimeout(() => {
        if (botFunctions) {
          botFunctions.startBotBets();
        }
      }, 1000);
    } else {
      console.log(`ü§ñ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ—Ç–æ–≤ (${currentBotCount}), –æ–∂–∏–¥–∞–Ω–∏–µ...`);
    }
  }, botCheckInterval);
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º`);
  console.log(`üíæ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${DATA_DIR}`);
  console.log(`üóÑÔ∏è MongoDB: ${MONGODB_URI && MONGODB_URI.trim() !== '' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON)'}`);
  console.log(`ü§ñ –°–∏—Å—Ç–µ–º–∞ –±–æ—Ç–æ–≤ Roll –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  savePersistedData();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  savePersistedData();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  process.exit(0);
});
