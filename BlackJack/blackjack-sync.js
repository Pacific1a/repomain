// BlackJack Multiplayer Synchronization
(function() {
  'use strict';

  let ws = null;
  let gameState = {
    status: 'waiting',
    players: [],
    history: []
  };
  
  let currentTab = 'live-bets';

  // –ñ–¥—ë–º WebSocket
  function waitForWebSocket() {
    if (window.GameWebSocket && window.GameWebSocket.socket && window.GameWebSocket.connected) {
      ws = window.GameWebSocket;
      console.log('‚úÖ BlackJack: WebSocket –≥–æ—Ç–æ–≤');
      initSync();
    } else {
      console.log('‚è≥ BlackJack: –û–∂–∏–¥–∞–Ω–∏–µ WebSocket...');
      setTimeout(waitForWebSocket, 500);
    }
  }

  function initSync() {
    console.log('üöÄ BlackJack: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ BlackJack
    ws.socket.emit('join_game', { game: 'blackjack' });
    console.log('üì° BlackJack: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ global_blackjack');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ws.socket.on('game_state_sync', (state) => {
      if (state.game === 'blackjack') {
        console.log('üîÑ BlackJack: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', state);
        gameState = state;
        updateUI();
      }
    });

    // –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –∑–∞—à–µ–ª –≤ –∏–≥—Ä—É
    ws.socket.on('player_joined_game', (data) => {
      if (data.game === 'blackjack') {
        console.log('üë§ BlackJack: –ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª:', data);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        const exists = gameState.players.find(p => p.userId === data.userId);
        if (!exists) {
          gameState.players.push({
            userId: data.userId,
            nickname: data.nickname,
            photoUrl: data.photoUrl,
            lastSeen: Date.now()
          });
        }
        updateUI();
      }
    });

    // –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã
    ws.socket.on('player_left_game', (data) => {
      if (data.game === 'blackjack') {
        console.log('üëã BlackJack: –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª:', data.userId);
        gameState.players = gameState.players.filter(p => p.userId !== data.userId);
        updateUI();
      }
    });

    // –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    ws.socket.on('blackjack_game_started', (data) => {
      console.log('üéÆ BlackJack: –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
      const player = gameState.players.find(p => p.userId === data.userId);
      if (player) {
        player.currentBet = data.bet;
        player.status = 'playing';
      }
      updateUI();
    });

    // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    ws.socket.on('blackjack_game_finished', (data) => {
      console.log('üèÅ BlackJack: –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      gameState.history.unshift({
        userId: data.userId,
        nickname: data.nickname,
        photoUrl: data.photoUrl,
        bet: data.bet,
        win: data.win,
        multiplier: data.multiplier,
        isWinner: data.isWinner,
        timestamp: Date.now()
      });
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–≥—Ä
      if (gameState.history.length > 20) {
        gameState.history = gameState.history.slice(0, 20);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
      const player = gameState.players.find(p => p.userId === data.userId);
      if (player) {
        player.status = 'waiting';
        player.currentBet = null;
      }
      
      updateUI();
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ws.socket.emit('get_game_state', { game: 'blackjack' });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä —á—Ç–æ –º—ã –∑–∞—à–ª–∏ –≤ –∏–≥—Ä—É
    notifyJoinGame();
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —á—Ç–æ –∑–∞—à–ª–∏ –≤ –∏–≥—Ä—É
  function notifyJoinGame() {
    if (!ws) return;
    
    let userId, nickname, photoUrl;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
      userId = tgUser.id;
      nickname = tgUser.first_name || tgUser.username || 'Player';
      photoUrl = tgUser.photo_url || null;
    } else if (window.TelegramUserData) {
      userId = window.TelegramUserData.id;
      nickname = window.TelegramUserData.first_name || window.TelegramUserData.username || 'Player';
      photoUrl = window.TelegramUserData.photo_url || null;
    } else {
      userId = 'user_' + Date.now();
      nickname = 'Player';
      photoUrl = null;
    }

    ws.socket.emit('join_game_session', {
      game: 'blackjack',
      userId,
      nickname,
      photoUrl
    });
    
    console.log('‚úÖ BlackJack: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ');
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
  function reportGameResult(bet, win, isWinner, multiplier) {
    if (!ws) return;
    
    let userId, nickname, photoUrl;

    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
      userId = tgUser.id;
      nickname = tgUser.first_name || tgUser.username || 'Player';
      photoUrl = tgUser.photo_url || null;
    } else if (window.TelegramUserData) {
      userId = window.TelegramUserData.id;
      nickname = window.TelegramUserData.first_name || window.TelegramUserData.username || 'Player';
      photoUrl = window.TelegramUserData.photo_url || null;
    } else {
      userId = 'user_' + Date.now();
      nickname = 'Player';
      photoUrl = null;
    }

    ws.socket.emit('blackjack_result', {
      game: 'blackjack',
      userId,
      nickname,
      photoUrl,
      bet,
      win,
      isWinner,
      multiplier
    });
    
    console.log('üìä BlackJack: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  function switchTab(tabName) {
    currentTab = tabName;
    
    const tabButtons = document.querySelectorAll('.section-menu > div');
    tabButtons.forEach(btn => {
      const btnTab = btn.classList.contains('selected-wrapper') ? 'live-bets' : 'your-bets';
      if (btnTab === tabName) {
        btn.querySelector('div').classList.remove('not-selected');
        btn.querySelector('div').classList.add('selected');
      } else {
        btn.querySelector('div').classList.remove('selected');
        btn.querySelector('div').classList.add('not-selected');
      }
    });
    
    updateUI();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
  function updateUI() {
    const playersList = document.querySelector('.user-templates');
    if (!playersList) return;

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    playersList.innerHTML = '';
    
    if (currentTab === 'live-bets') {
      // Live Bets - –û–ë–©–ê–Ø –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∏–≥—Ä –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º)
      updateOnlineCount();
      renderAllGamesHistory(playersList);
    } else {
      // Your Bets - –∏—Å—Ç–æ—Ä–∏—è –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      renderPlayerGamesHistory(playersList);
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ –∏—Å—Ç–æ—Ä–∏–∏)
  function updateOnlineCount() {
    const onlineElement = document.querySelector('.element-online .text-wrapper-12');
    if (onlineElement) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ –∏—Å—Ç–æ—Ä–∏–∏
      const gamesCount = gameState.history.length;
      onlineElement.textContent = `${gamesCount} games`;
    }
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –û–ë–©–ï–ô –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (Live Bets)
  function renderAllGamesHistory(container) {
    if (gameState.history.length === 0) {
      container.innerHTML = '<div style="color: #7a7a7a; font-size: 12px; padding: 20px; text-align: center;">No games played yet</div>';
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
    const recentGames = gameState.history.slice(0, 10);
    
    recentGames.forEach(game => {
      const playerEl = createPlayerElement(game, false); // false = –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—É —Å —Ü–≤–µ—Ç–∞–º–∏
      container.appendChild(playerEl);
    });
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –¢–ï–ö–£–©–ï–ì–û –∏–≥—Ä–æ–∫–∞ (Your Bets)
  function renderPlayerGamesHistory(container) {
    const currentUserId = getCurrentUserId();
    
    if (!currentUserId) {
      container.innerHTML = '<div style="color: #7a7a7a; font-size: 12px; padding: 20px; text-align: center;">Unable to identify player</div>';
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const playerGames = gameState.history.filter(game => game.userId === currentUserId);
    
    if (playerGames.length === 0) {
      container.innerHTML = '<div style="color: #7a7a7a; font-size: 12px; padding: 20px; text-align: center;">You have no games yet</div>';
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä –∏–≥—Ä–æ–∫–∞
    const recentGames = playerGames.slice(0, 10);
    
    recentGames.forEach(game => {
      const playerEl = createPlayerElement(game, false); // false = –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—É —Å —Ü–≤–µ—Ç–∞–º–∏
      container.appendChild(playerEl);
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å userId —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  function getCurrentUserId() {
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      return window.Telegram.WebApp.initDataUnsafe.user.id;
    } else if (window.TelegramUserData) {
      return window.TelegramUserData.id;
    } else if (ws && ws.currentUser) {
      return ws.currentUser.id;
    }
    return null;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
  function createPlayerElement(player, isLive) {
    const div = document.createElement('div');
    div.className = 'div-4';
    
    // –û–∫—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!isLive) {
      if (player.isWinner) {
        div.style.backgroundColor = '#407B3D'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
      } else {
        div.style.backgroundColor = '#402626'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
      }
      div.style.borderRadius = '8px';
      div.style.padding = '8px';
      div.style.marginBottom = '4px';
    }
    
    // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä
    let avatarHTML = '';
    if (player.photoUrl) {
      avatarHTML = `<div class="avatar-2" style="background-image: url(${player.photoUrl}); background-size: cover; background-position: center; width: 19px; height: 19px; border-radius: 50%;"></div>`;
    } else {
      const initial = player.nickname ? player.nickname[0].toUpperCase() : 'P';
      const colors = [
        'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
        'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
        'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
        'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
      ];
      const colorIndex = (player.nickname?.charCodeAt(0) || 0) % colors.length;
      avatarHTML = `<div class="avatar-2" style="background: ${colors[colorIndex]}; color: white; display: flex; align-items: center; justify-content: center; font-weight: bold; width: 19px; height: 19px; border-radius: 50%; font-size: 10px;">${initial}</div>`;
    }
    
    // –ú–∞—Å–∫–∏—Ä—É–µ–º –∏–º—è
    const maskedName = maskPlayerName(player.nickname || 'Player');
    
    // –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ–∫—Ä–∞—à–µ–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º
    const multiplier = player.multiplier ? `${player.multiplier.toFixed(1)}x` : '0x';
    const winAmount = player.isWinner && player.win ? player.win : '--';
    
    div.innerHTML = `
      <div class="acc-inf">
        <div class="avatar-wrapper">${avatarHTML}</div>
        <div class="div-3"><div class="text-wrapper-17" style="color: #fff;">${maskedName}</div></div>
      </div>
      <div class="div-3"><div class="text-wrapper-18" style="color: #fff;">${player.bet}</div></div>
      <div class="div-3"><div class="text-wrapper-18" style="color: #fff;">${multiplier}</div></div>
      <div class="div-3"><div class="text-wrapper-19" style="color: #fff;">${winAmount}</div></div>
    `;
    
    return div;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
  function maskPlayerName(name) {
    return name || 'Player';
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
  function initTabs() {
    const selectedWrapper = document.querySelector('.section-menu .selected-wrapper');
    const yourBetsWrapper = document.querySelector('.section-menu .your-bets');
    
    if (selectedWrapper) {
      selectedWrapper.addEventListener('click', () => switchTab('live-bets'));
    }
    
    if (yourBetsWrapper) {
      yourBetsWrapper.addEventListener('click', () => switchTab('your-bets'));
    }
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
    switchTab('live-bets');
  }

  // –≠–∫—Å–ø–æ—Ä—Ç
  window.BlackJackSync = {
    reportGameResult,
    getState: () => gameState,
    switchTab,
    updateUI
  };

  // –ó–∞–ø—É—Å–∫
  waitForWebSocket();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏ –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTabs);
  } else {
    initTabs();
  }

  console.log('‚úÖ BlackJack Sync –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

})();
