(function() {
  'use strict';

  let ws = null;
  let gameState = {
    status: 'waiting', // waiting, betting, spinning, finished
    players: [],
    timer: 0,
    startTime: null
  };
  
  let timerActive = false; // –§–ª–∞–≥ —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–∞–π–º–µ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑

  // –ñ–¥—ë–º WebSocket
  function waitForWebSocket() {
    if (window.GameWebSocket && window.GameWebSocket.socket && window.GameWebSocket.connected) {
      ws = window.GameWebSocket;
      console.log('‚úÖ WebSocket –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', ws.connected);
      console.log('üÜî Socket ID:', ws.socket.id);
      initSync();
    } else {
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ WebSocket...');
      setTimeout(waitForWebSocket, 500);
    }
  }

  function initSync() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Roll...');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Roll
    ws.socket.emit('join_game', { game: 'roll' });
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å join_game –¥–ª—è roll');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ global_roll');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ws.socket.on('game_state_sync', (state) => {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', state);
      console.log('ü§ñ –ò–≥—Ä–æ–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:', state.players?.length, '–±–æ—Ç–æ–≤:', state.players?.filter(p => p.isBot || String(p.userId || p.id || '').startsWith('bot_')).length);
      
      const wasWaiting = gameState.status === 'waiting';
      const previousStatus = gameState.status;
      gameState = state;
      
      // –¢–û–õ–¨–ö–û updateUI (–≤–Ω—É—Ç—Ä–∏ —É–∂–µ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞)
      updateUI();
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤ betting
      // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ waiting->betting, —Ç–∞–∫ –∏ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è betting
      if (state.status === 'betting' && state.startTime) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        if (activeTimerInterval) {
          clearInterval(activeTimerInterval);
          activeTimerInterval = null;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º/–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        timerActive = true;
        console.log('‚è±Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º/–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä (—Å—Ç–∞—Ç—É—Å: betting, startTime:', state.startTime, ')');
        syncTimer(state.startTime, state.timer);
      }
      
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤ spinning, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PLAY
      if (state.status === 'spinning') {
        if (activeTimerInterval) {
          clearInterval(activeTimerInterval);
          activeTimerInterval = null;
        }
        timerActive = false;
        
        const waitText = document.querySelector('.wait span:last-child');
        const waitSpan = document.querySelector('.wait span:first-child');
        if (waitText && waitSpan) {
          waitSpan.style.display = 'none';
          waitText.style.display = 'inline';
          waitText.style.color = '#ffc107';
          waitText.textContent = 'PLAY';
        }
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
      if (state.status === 'waiting') {
        timerActive = false;
        if (activeTimerInterval) {
          clearInterval(activeTimerInterval);
          activeTimerInterval = null;
        }
      }
    });

    // –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É
    ws.socket.on('player_bet', (data) => {
      console.log('üí∞ –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É:', data, '–±–æ—Ç:', data.isBot);
      
      // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ (–° –¶–í–ï–¢–û–ú –ò –§–õ–ê–ì–û–ú –ë–û–¢–ê!)
      const existingPlayer = gameState.players.find(p => p.userId === data.userId);
      if (existingPlayer) {
        existingPlayer.bet += data.bet;
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª
        if (data.color) {
          existingPlayer.color = data.color;
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –±–æ—Ç–∞
        if (data.isBot !== undefined) {
          existingPlayer.isBot = data.isBot;
        }
      } else {
        gameState.players.push({
          userId: data.userId,
          nickname: data.nickname,
          photoUrl: data.photoUrl,
          bet: data.bet,
          color: data.color, // –î–û–ë–ê–í–õ–Ø–ï–ú –¶–í–ï–¢!
          isBot: data.isBot || false // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –±–æ—Ç–∞
        });
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–æ–ª–µ—Å–æ–º
      syncPlayersToWheel();
      updateUI();
    });

    // –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    ws.socket.on('game_started', (data) => {
      console.log('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢–∞–π–º–µ—Ä:', data.timer);
      gameState.status = 'betting';
      gameState.startTime = data.startTime;
      gameState.timer = data.timer;
      
      syncTimer(data.startTime, data.timer);
    });

    // –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ
    console.log('üéØ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ spin_wheel...');
    ws.socket.on('spin_wheel', (data) => {
      console.log('üì• –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï spin_wheel!', data);
      console.log('üé∞ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', data.winner);
      console.log('üìä –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–∫–∏:', gameState.players);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
      if (activeTimerInterval) {
        clearInterval(activeTimerInterval);
        activeTimerInterval = null;
      }
      
      gameState.status = 'spinning';
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "Play" —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è spinning
      const waitText = document.querySelector('.wait span:last-child');
      const waitSpan = document.querySelector('.wait span:first-child');
      if (waitText && waitSpan) {
        waitSpan.style.display = 'none';
        waitText.style.display = 'inline';
        waitText.style.color = '#ffc107';
        waitText.textContent = 'PLAY';
      }
      
      // –ù–ï –æ—á–∏—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤! –ö–æ–ª–µ—Å–æ –¥–æ–ª–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å—Å—è —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
      if (window.rollGame && window.rollGame.spin) {
        console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º window.rollGame.spin(', data.winner, ')');
        window.rollGame.spin(data.winner);
      } else {
        console.error('‚ùå window.rollGame.spin –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏)
      setTimeout(() => {
        const winner = gameState.players.find(p => p.userId === data.winner);
        if (winner) {
          console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', winner.nickname);
          if (window.rollGame && window.rollGame.showResult) {
            window.rollGame.showResult({ winner: data.winner, amount: data.amount });
          }
        }
        
        // –û—á–∏—â–∞–µ–º –∫–æ–ª–µ—Å–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        setTimeout(() => {
          console.log('üîÑ –°–±—Ä–æ—Å –∏–≥—Ä—ã');
          gameState.status = 'waiting';
          gameState.players = [];
          
          // –°–±—Ä–æ—Å UI
          const waitText = document.querySelector('.wait span:first-child');
          if (waitText) {
            waitText.style.display = 'inline';
            waitText.style.color = '#6a6a6a';
            waitText.textContent = 'Wait...';
          }
          const playText = document.querySelector('.wait span:last-child');
          if (playText) {
            playText.style.display = 'none';
          }
          
          updateUI();
        }, 3000);
      }, 5000);
    });

    // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω–æ - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ spin_wheel)
    ws.socket.on('game_finished', (data) => {
      console.log('üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ)');
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ws.socket.emit('get_game_state', { game: 'roll' });
  }

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Ç–∞–π–º–µ—Ä–∞
  let activeTimerInterval = null;

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞
  function syncTimer(startTime, duration) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (activeTimerInterval) {
      clearInterval(activeTimerInterval);
      activeTimerInterval = null;
    }

    const elapsed = Math.floor((Date.now() - new Date(startTime).getTime()) / 1000);
    let timeLeft = duration - elapsed;

    if (timeLeft <= 0) {
      timeLeft = 0;
    }

    console.log(`‚è±Ô∏è –¢–∞–π–º–µ—Ä: ${timeLeft} —Å–µ–∫ (–ø—Ä–æ—à–ª–æ ${elapsed} —Å–µ–∫)`);

    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É
    const waitText = document.querySelector('.wait span:last-child');
    const waitSpan = document.querySelector('.wait span:first-child');
    
    if (waitText && waitSpan) {
      waitSpan.style.display = 'none';
      if (timeLeft > 0) {
        waitText.style.display = 'inline';
        waitText.style.color = '#39d811';
        waitText.textContent = `${timeLeft}s`;
      } else {
        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "Play" - –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è spin_wheel
        waitText.style.display = 'none';
      }
    }

    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –Ω–µ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (timeLeft <= 0) {
      console.log('‚è∞ –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ–∂–∏–¥–∞–µ–º spin_wheel –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
      return;
    }

    activeTimerInterval = setInterval(() => {
      timeLeft--;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã - –µ—Å–ª–∏ —É–∂–µ spinning, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (gameState.status === 'spinning' || gameState.status === 'finished') {
        clearInterval(activeTimerInterval);
        activeTimerInterval = null;
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
      if (waitText && waitSpan) {
        waitSpan.style.display = 'none';
        
        if (timeLeft > 0) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
          waitText.style.display = 'inline';
          waitText.style.color = '#39d811';
          waitText.textContent = `${timeLeft}s`;
        } else {
          // –¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è - —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –∂–¥–µ–º spin_wheel –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          waitText.style.display = 'none';
          waitSpan.style.display = 'none';
        }
      }

      if (timeLeft <= 0) {
        clearInterval(activeTimerInterval);
        activeTimerInterval = null;
        console.log('‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ–∂–∏–¥–∞–µ–º spin_wheel –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "Play" –∑–¥–µ—Å—å - –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç spin_wheel
      }
    }, 1000);
  }

  // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
  function placeBet(amount) {
    if (!ws) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let userId, nickname, photoUrl;

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Telegram WebApp
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
      userId = tgUser.id;
      nickname = tgUser.first_name || tgUser.username || 'Player';
      photoUrl = tgUser.photo_url || null;
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: TelegramUserData
    else if (window.TelegramUserData) {
      userId = window.TelegramUserData.id;
      nickname = window.TelegramUserData.first_name || window.TelegramUserData.username || 'Player';
      photoUrl = window.TelegramUserData.photo_url || null;
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: WebSocket currentUser
    else if (ws.currentUser) {
      userId = ws.currentUser.id;
      nickname = ws.currentUser.nickname || 'Player';
      photoUrl = ws.currentUser.photoUrl || null;
    }
    // Fallback
    else {
      userId = 'user_' + Date.now();
      nickname = 'Player';
      photoUrl = null;
    }

    console.log('üí∞ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É:', { userId, nickname, photoUrl, bet: amount });
    console.log('üì° WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { connected: ws.connected, socketId: ws.socket?.id });

    ws.socket.emit('place_bet', {
      game: 'roll',
      userId,
      nickname,
      photoUrl,
      bet: amount
    });

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ place_bet –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI (–±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è)
  function updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–µ—Å–æ —á–µ—Ä–µ–∑ wheel-game
    if (window.rollGame && window.rollGame.updateState) {
      window.rollGame.updateState(gameState);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const currentTab = window.TabsManager ? window.TabsManager.getCurrentTab() : 'previos';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è Live Bets
    if (currentTab === 'live-bets' && window.TabsManager) {
      window.TabsManager.updatePlayersCount(gameState.players.length);
    }

    const playersList = document.querySelector('.user-templates');
    if (!playersList) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const currentPlayerIds = new Set(gameState.players.map(p => p.userId));
    const existingPlayers = playersList.querySelectorAll('[data-player-id]');
    existingPlayers.forEach(el => {
      const playerId = parseInt(el.getAttribute('data-player-id'));
      if (!currentPlayerIds.has(playerId)) {
        el.remove(); // –£–¥–∞–ª—è–µ–º —Ñ–µ–π–∫–æ–≤—ã—Ö/—Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      }
    });

    gameState.players.forEach(player => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      if (!player || !player.userId || !player.nickname) return;
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –∏–≥—Ä–æ–∫–∞
      let playerEl = playersList.querySelector(`[data-player-id="${player.userId}"]`);
      
      if (!playerEl) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç
        playerEl = document.createElement('div');
        playerEl.className = 'win';
        playerEl.setAttribute('data-player-id', player.userId);
        
        let avatarHTML = '';
        if (player.photoUrl) {
          avatarHTML = `<div class="avatar-2" style="background-image: url(${player.photoUrl}); background-size: cover; background-position: center; width: 25px; height: 25px; border-radius: 50%;"></div>`;
        } else {
          const initial = player.nickname ? player.nickname[0].toUpperCase() : 'P';
          avatarHTML = `<div class="avatar-2" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; display: flex; align-items: center; justify-content: center; font-weight: bold; width: 25px; height: 25px; border-radius: 50%; font-size: 16px;">${initial}</div>`;
        }
        
        // –í Live Bets –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∏–∫ –∏ –∞–≤–∞—Ç–∞—Ä–∫—É, –≤ Previos - –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (currentTab === 'live-bets') {
          playerEl.innerHTML = `
            <div class="acc-inf">
              <div class="avatar-wrapper">
                ${avatarHTML}
              </div>
              <div class="n-k">
                <div class="n-k-2">${player.nickname || 'Player'}</div>
              </div>
            </div>
            <div class="div-wrapper-2">
              <div class="text-wrapper-14">-</div>
            </div>
            <div class="element-wrapper">
              <div class="element-3">-</div>
            </div>
          `;
        } else {
          playerEl.innerHTML = `
            <div class="acc-inf">
              <div class="avatar-wrapper">
                ${avatarHTML}
              </div>
              <div class="n-k">
                <div class="n-k-2">${player.nickname || 'Player'}</div>
              </div>
            </div>
            <div class="div-wrapper-2">
              <div class="text-wrapper-14" data-bet-amount>${player.bet}</div>
            </div>
            <div class="element-wrapper">
              <div class="element-3" data-win-amount>-</div>
            </div>
          `;
        }
        playersList.appendChild(playerEl);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ Previos
        if (currentTab === 'previos') {
          const betElement = playerEl.querySelector('[data-bet-amount]');
          if (betElement) betElement.textContent = player.bet;
        }
      }
    });
  }
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–æ–ª–µ—Å–æ–º
  function syncPlayersToWheel() {
    if (!window.rollGame || !window.rollGame.updateState) return;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è wheel-game (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)
    const wheelPlayers = gameState.players
      .filter(player => player && player.userId && player.nickname) // –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
      .map((player, index) => {
        const playerId = String(player.userId || player.id || '');
        const isBot = player.isBot || playerId.startsWith('bot_');
        return {
          id: playerId,
          username: player.nickname,
          photo_url: player.photoUrl,
          betAmount: player.bet || 0,
          color: player.color || '#39d811', // –î–û–ë–ê–í–õ–Ø–ï–ú –¶–í–ï–¢!
          isUser: false,
          isBot: isBot // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ—Ç–æ–≤
        };
      });
    
    console.log('üîÑ syncPlayersToWheel:', wheelPlayers.length, '–∏–≥—Ä–æ–∫–æ–≤, –±–æ—Ç–æ–≤:', wheelPlayers.filter(p => p.isBot).length);
    window.rollGame.updateState({ players: wheelPlayers });
  }
  // –≠–∫—Å–ø–æ—Ä—Ç
  window.RollSync = {
    placeBet,
    getState: () => gameState,
    syncPlayersToWheel
  };

  // –ó–∞–ø—É—Å–∫
  waitForWebSocket();

  console.log('‚úÖ Roll Sync –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

  // –£–ë–†–ê–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤—ã–∑—ã–≤–∞–ª –∑–∞–¥–µ—Ä–∂–∫—É
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ game_state_sync –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

})();
