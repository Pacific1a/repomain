/**
 * Real-time Live Prizes - –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ —á–µ—Ä–µ–∑ WebSocket
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏–∑–æ–≤ –ë–ï–ó –Ω–∏–∫–æ–≤ –∏ —Ü–µ–Ω
 */

class RealtimeLivePrizes {
    constructor() {
        this.ws = null;
        this.streakContainer = null;
        this.liveContainer = null;
        this.recentWins = [];
        this.maxWins = 10; // –ú–∞–∫—Å–∏–º—É–º –≤–∏–¥–∏–º—ã—Ö –ø—Ä–∏–∑–æ–≤
        this.reconnectTimeout = null;
        this.reconnectDelay = 3000;
        this.maxReconnectAttempts = 5; // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectAttempts = 0;
        this.isLocalDev = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        
        this.init();
    }
    
    init() {
        this.streakContainer = document.querySelector('.streak');
        if (!this.streakContainer) {
            console.warn('Live prizes container not found');
            return;
        }
        
        this.setupStyles();
        this.setupContainer();
        this.connectWebSocket();
        // –§–µ–π–∫–æ–≤—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
    }
    
    setupStyles() {
        const styleId = 'realtime-live-prizes-style';
        if (document.getElementById(styleId)) return;
        
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .streak {
                position: relative;
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .realtime-live-container {
                flex: 1;
                height: 60px;
                overflow: hidden;
                position: relative;
                background: transparent;
                /* –í–∏–Ω—å–µ—Ç–∫–∞ –ø–æ –∫—Ä–∞—è–º */
                mask-image: linear-gradient(to right, 
                    transparent 0%, 
                    black 10%, 
                    black 90%, 
                    transparent 100%);
                -webkit-mask-image: linear-gradient(to right, 
                    transparent 0%, 
                    black 10%, 
                    black 90%, 
                    transparent 100%);
            }
            
            .live-prizes-track {
                display: flex;
                align-items: center;
                height: 100%;
                perspective: 1000px;
            }
            
            .live-prize-chip {
                flex-shrink: 0;
                width: 60px;
                height: 60px;
                border-radius: 10px;
                overflow: hidden;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
                animation: slideIn 0.5s ease-out;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            }
            
            .live-prize-chip.new {
                animation: flyFromTop 1.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            }
        
            
            .live-prize-chip img {
                width: 100%;
                height: 100%;
                object-fit: contain;
                padding: 4px;
            }
            
            @keyframes slideIn {
                from {
                    opacity: 0;
                    transform: translateX(-30px) scale(0.8);
                }
                to {
                    opacity: 1;
                    transform: translateX(0) scale(1);
                }
            }
            
            @keyframes flyFromTop {
                0% {
                    opacity: 0;
                    transform: translateY(-100px) scale(0.6);
                }
                40% {
                    opacity: 0.8;
                    transform: translateY(-10px) scale(0.95);
                }
                70% {
                    opacity: 1;
                    transform: translateY(2px) scale(1.02);
                }
                85% {
                    transform: translateY(-1px) scale(1.01);
                }
                100% {
                    opacity: 1;
                    transform: translateY(0) scale(1);
                }
            }
            
            .circle {
                animation: pulse 2s infinite;
            }
            
            @keyframes pulse {
                0%, 100% { 
                    opacity: 1; 
                    transform: scale(1); 
                }
                50% { 
                    opacity: 0.7; 
                    transform: scale(1.2); 
                }
            }
            
            /* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */
            .ws-status {
                position: absolute;
                bottom: -20px;
                right: 0;
                font-size: 10px;
                color: rgba(255, 255, 255, 0.5);
            }
            
            .ws-status.connected {
                color: #4CAF50;
            }
            
            .ws-status.disconnected {
                color: #FF5252;
            }
        `;
        document.head.appendChild(style);
    }
    
    setupContainer() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const oldPrizes = this.streakContainer.querySelectorAll('.img-2, .img-3, .smooth-conveyor-container, .realistic-live-container');
        oldPrizes.forEach(el => el.remove());
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const liveContainer = document.createElement('div');
        liveContainer.className = 'realtime-live-container';
        
        const track = document.createElement('div');
        track.className = 'live-prizes-track';
        
        liveContainer.appendChild(track);
        
        const frameElement = this.streakContainer.querySelector('.frame');
        if (frameElement) {
            frameElement.insertAdjacentElement('afterend', liveContainer);
        } else {
            this.streakContainer.appendChild(liveContainer);
        }
        
        this.liveContainer = track;
    }
    
    connectWebSocket() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞
        let wsUrl;
        
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 3000
            wsUrl = 'ws://localhost:3000';
            console.log('üîß Development mode - connecting to local WebSocket server');
        } else {
            // Production - —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º URL Render —Å–µ—Ä–≤–µ—Ä–∞
            // –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ Vercel, –±—ç–∫–µ–Ω–¥ –Ω–∞ Render
            wsUrl = 'wss://telegram-games-plkj.onrender.com';
            console.log('üåê Production mode - connecting to Render WebSocket server');
        }
        
        console.log('üîå Connecting to WebSocket:', wsUrl);
        
        try {
            this.ws = new WebSocket(wsUrl);
            
            this.ws.onopen = () => {
                console.log('‚úÖ WebSocket connected');
                this.reconnectDelay = 3000; // –°–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏
                this.reconnectAttempts = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
            };
            
            this.ws.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    
                    if (data.type === 'init') {
                        // –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏
                        this.recentWins = (data.wins || []).map(win => this.fixImagePath(win));
                        this.renderWins();
                    } else if (data.type === 'new_win') {
                        // –ù–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å
                        this.addWin(this.fixImagePath(data.win));
                    }
                } catch (error) {
                    console.error('‚ùå Error parsing WebSocket message:', error);
                }
            };
            
            this.ws.onerror = (error) => {
                console.error('‚ùå WebSocket error:', error);
            };
            
            this.ws.onclose = () => {
                console.log('‚ùå WebSocket disconnected, reconnecting...');
                this.scheduleReconnect();
            };
        } catch (error) {
            console.error('‚ùå Error creating WebSocket:', error);
            this.scheduleReconnect();
        }
    }
    
    scheduleReconnect() {
        if (this.reconnectTimeout) {
            clearTimeout(this.reconnectTimeout);
        }
        
        // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (this.isLocalDev) {
            this.reconnectAttempts++;
            if (this.reconnectAttempts >= this.maxReconnectAttempts) {
                console.warn(`‚ö†Ô∏è  WebSocket: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${this.maxReconnectAttempts})`);
                console.warn('üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ WebSocket —Å–µ—Ä–≤–µ—Ä: cd server && node server.js');
                console.warn('üí° –ò–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –æ—à–∏–±–∫–∏ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ WebSocket');
                return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            }
        }
        
        this.reconnectTimeout = setTimeout(() => {
            this.connectWebSocket();
            this.reconnectDelay = Math.min(this.reconnectDelay * 1.5, 30000); // –ú–∞–∫—Å 30 —Å–µ–∫
        }, this.reconnectDelay);
    }
    
    sendWin(prize, isChips, color) {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            console.warn('‚ö†Ô∏è  WebSocket not connected');
            return;
        }
        
        const imagePath = this.getPrizeImagePath(prize, color, isChips);
        
        const message = JSON.stringify({
            type: 'win',
            prize: prize,
            isChips: isChips,
            color: color,
            imagePath: imagePath
        });
        
        this.ws.send(message);
    }
    
    getPrizeImagePath(prize, color, isChips) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ upgrade/
        const currentPath = window.location.pathname;
        const currentHref = window.location.href;
        
        // –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const isInUpgrade = currentPath.includes('/upgrade/') || 
                           currentPath.includes('/upgrade') ||
                           currentHref.includes('/upgrade/');
        
        const prefix = isInUpgrade ? '../' : '';
        
        if (isChips) {
            return `${prefix}main/Chips-case/${color}/${prize}-chips-${color}.png`;
        } else {
            return `${prefix}main/Case-tokens/${color}/${prize}-r-${color}.png`;
        }
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket
    fixImagePath(win) {
        const currentPath = window.location.pathname;
        const isInUpgrade = currentPath.includes('/upgrade/') || 
                           currentPath.includes('/upgrade');
        
        if (isInUpgrade && win.imagePath && !win.imagePath.startsWith('../')) {
            // –î–æ–±–∞–≤–ª—è–µ–º ../ –µ—Å–ª–∏ –º—ã –≤ upgrade/ –∏ –ø—É—Ç—å –µ—â—ë –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
            return {
                ...win,
                imagePath: '../' + win.imagePath
            };
        }
        
        return win;
    }
    
    addWin(winData) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à
        this.recentWins.unshift(winData);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if (this.recentWins.length > this.maxWins) {
            this.recentWins = this.recentWins.slice(0, this.maxWins);
        }
        
        this.renderWins(true);
    }
    
    renderWins(animate = false) {
        if (!this.liveContainer) return;
        
        this.liveContainer.innerHTML = '';
        
        this.recentWins.forEach((win, index) => {
            const chipElement = this.createChipElement(win, animate && index === 0);
            this.liveContainer.appendChild(chipElement);
        });
    }
    
    createChipElement(win, isNew = false) {
        const chip = document.createElement('div');
        chip.className = 'live-prize-chip' + (isNew ? ' new' : '');
        
        const img = document.createElement('img');
        img.src = win.imagePath;
        img.alt = win.prize;
        img.onerror = () => {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            chip.textContent = win.isChips ? 'üíé' : 'üí∞';
            chip.style.fontSize = '24px';
        };
        
        chip.appendChild(img);
        
        return chip;
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞
    broadcastWin(prize, isChips, color) {
        this.sendWin(prize, isChips, color);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        window.LivePrizes = new RealtimeLivePrizes();
        console.log('‚úÖ Realtime Live Prizes initialized');
    }, 300);
});
